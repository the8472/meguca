/* automatically generated by rust-bindgen */


#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]


#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const _ERRNO_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const EPERM: ::std::os::raw::c_uint = 1;
pub const ENOENT: ::std::os::raw::c_uint = 2;
pub const ESRCH: ::std::os::raw::c_uint = 3;
pub const EINTR: ::std::os::raw::c_uint = 4;
pub const EIO: ::std::os::raw::c_uint = 5;
pub const ENXIO: ::std::os::raw::c_uint = 6;
pub const E2BIG: ::std::os::raw::c_uint = 7;
pub const ENOEXEC: ::std::os::raw::c_uint = 8;
pub const EBADF: ::std::os::raw::c_uint = 9;
pub const ECHILD: ::std::os::raw::c_uint = 10;
pub const EAGAIN: ::std::os::raw::c_uint = 11;
pub const ENOMEM: ::std::os::raw::c_uint = 12;
pub const EACCES: ::std::os::raw::c_uint = 13;
pub const EFAULT: ::std::os::raw::c_uint = 14;
pub const ENOTBLK: ::std::os::raw::c_uint = 15;
pub const EBUSY: ::std::os::raw::c_uint = 16;
pub const EEXIST: ::std::os::raw::c_uint = 17;
pub const EXDEV: ::std::os::raw::c_uint = 18;
pub const ENODEV: ::std::os::raw::c_uint = 19;
pub const ENOTDIR: ::std::os::raw::c_uint = 20;
pub const EISDIR: ::std::os::raw::c_uint = 21;
pub const EINVAL: ::std::os::raw::c_uint = 22;
pub const ENFILE: ::std::os::raw::c_uint = 23;
pub const EMFILE: ::std::os::raw::c_uint = 24;
pub const ENOTTY: ::std::os::raw::c_uint = 25;
pub const ETXTBSY: ::std::os::raw::c_uint = 26;
pub const EFBIG: ::std::os::raw::c_uint = 27;
pub const ENOSPC: ::std::os::raw::c_uint = 28;
pub const ESPIPE: ::std::os::raw::c_uint = 29;
pub const EROFS: ::std::os::raw::c_uint = 30;
pub const EMLINK: ::std::os::raw::c_uint = 31;
pub const EPIPE: ::std::os::raw::c_uint = 32;
pub const EDOM: ::std::os::raw::c_uint = 33;
pub const ERANGE: ::std::os::raw::c_uint = 34;
pub const EDEADLK: ::std::os::raw::c_uint = 35;
pub const ENAMETOOLONG: ::std::os::raw::c_uint = 36;
pub const ENOLCK: ::std::os::raw::c_uint = 37;
pub const ENOSYS: ::std::os::raw::c_uint = 38;
pub const ENOTEMPTY: ::std::os::raw::c_uint = 39;
pub const ELOOP: ::std::os::raw::c_uint = 40;
pub const EWOULDBLOCK: ::std::os::raw::c_uint = 11;
pub const ENOMSG: ::std::os::raw::c_uint = 42;
pub const EIDRM: ::std::os::raw::c_uint = 43;
pub const ECHRNG: ::std::os::raw::c_uint = 44;
pub const EL2NSYNC: ::std::os::raw::c_uint = 45;
pub const EL3HLT: ::std::os::raw::c_uint = 46;
pub const EL3RST: ::std::os::raw::c_uint = 47;
pub const ELNRNG: ::std::os::raw::c_uint = 48;
pub const EUNATCH: ::std::os::raw::c_uint = 49;
pub const ENOCSI: ::std::os::raw::c_uint = 50;
pub const EL2HLT: ::std::os::raw::c_uint = 51;
pub const EBADE: ::std::os::raw::c_uint = 52;
pub const EBADR: ::std::os::raw::c_uint = 53;
pub const EXFULL: ::std::os::raw::c_uint = 54;
pub const ENOANO: ::std::os::raw::c_uint = 55;
pub const EBADRQC: ::std::os::raw::c_uint = 56;
pub const EBADSLT: ::std::os::raw::c_uint = 57;
pub const EDEADLOCK: ::std::os::raw::c_uint = 35;
pub const EBFONT: ::std::os::raw::c_uint = 59;
pub const ENOSTR: ::std::os::raw::c_uint = 60;
pub const ENODATA: ::std::os::raw::c_uint = 61;
pub const ETIME: ::std::os::raw::c_uint = 62;
pub const ENOSR: ::std::os::raw::c_uint = 63;
pub const ENONET: ::std::os::raw::c_uint = 64;
pub const ENOPKG: ::std::os::raw::c_uint = 65;
pub const EREMOTE: ::std::os::raw::c_uint = 66;
pub const ENOLINK: ::std::os::raw::c_uint = 67;
pub const EADV: ::std::os::raw::c_uint = 68;
pub const ESRMNT: ::std::os::raw::c_uint = 69;
pub const ECOMM: ::std::os::raw::c_uint = 70;
pub const EPROTO: ::std::os::raw::c_uint = 71;
pub const EMULTIHOP: ::std::os::raw::c_uint = 72;
pub const EDOTDOT: ::std::os::raw::c_uint = 73;
pub const EBADMSG: ::std::os::raw::c_uint = 74;
pub const EOVERFLOW: ::std::os::raw::c_uint = 75;
pub const ENOTUNIQ: ::std::os::raw::c_uint = 76;
pub const EBADFD: ::std::os::raw::c_uint = 77;
pub const EREMCHG: ::std::os::raw::c_uint = 78;
pub const ELIBACC: ::std::os::raw::c_uint = 79;
pub const ELIBBAD: ::std::os::raw::c_uint = 80;
pub const ELIBSCN: ::std::os::raw::c_uint = 81;
pub const ELIBMAX: ::std::os::raw::c_uint = 82;
pub const ELIBEXEC: ::std::os::raw::c_uint = 83;
pub const EILSEQ: ::std::os::raw::c_uint = 84;
pub const ERESTART: ::std::os::raw::c_uint = 85;
pub const ESTRPIPE: ::std::os::raw::c_uint = 86;
pub const EUSERS: ::std::os::raw::c_uint = 87;
pub const ENOTSOCK: ::std::os::raw::c_uint = 88;
pub const EDESTADDRREQ: ::std::os::raw::c_uint = 89;
pub const EMSGSIZE: ::std::os::raw::c_uint = 90;
pub const EPROTOTYPE: ::std::os::raw::c_uint = 91;
pub const ENOPROTOOPT: ::std::os::raw::c_uint = 92;
pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 93;
pub const ESOCKTNOSUPPORT: ::std::os::raw::c_uint = 94;
pub const EOPNOTSUPP: ::std::os::raw::c_uint = 95;
pub const EPFNOSUPPORT: ::std::os::raw::c_uint = 96;
pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 97;
pub const EADDRINUSE: ::std::os::raw::c_uint = 98;
pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 99;
pub const ENETDOWN: ::std::os::raw::c_uint = 100;
pub const ENETUNREACH: ::std::os::raw::c_uint = 101;
pub const ENETRESET: ::std::os::raw::c_uint = 102;
pub const ECONNABORTED: ::std::os::raw::c_uint = 103;
pub const ECONNRESET: ::std::os::raw::c_uint = 104;
pub const ENOBUFS: ::std::os::raw::c_uint = 105;
pub const EISCONN: ::std::os::raw::c_uint = 106;
pub const ENOTCONN: ::std::os::raw::c_uint = 107;
pub const ESHUTDOWN: ::std::os::raw::c_uint = 108;
pub const ETOOMANYREFS: ::std::os::raw::c_uint = 109;
pub const ETIMEDOUT: ::std::os::raw::c_uint = 110;
pub const ECONNREFUSED: ::std::os::raw::c_uint = 111;
pub const EHOSTDOWN: ::std::os::raw::c_uint = 112;
pub const EHOSTUNREACH: ::std::os::raw::c_uint = 113;
pub const EALREADY: ::std::os::raw::c_uint = 114;
pub const EINPROGRESS: ::std::os::raw::c_uint = 115;
pub const ESTALE: ::std::os::raw::c_uint = 116;
pub const EUCLEAN: ::std::os::raw::c_uint = 117;
pub const ENOTNAM: ::std::os::raw::c_uint = 118;
pub const ENAVAIL: ::std::os::raw::c_uint = 119;
pub const EISNAM: ::std::os::raw::c_uint = 120;
pub const EREMOTEIO: ::std::os::raw::c_uint = 121;
pub const EDQUOT: ::std::os::raw::c_uint = 122;
pub const ENOMEDIUM: ::std::os::raw::c_uint = 123;
pub const EMEDIUMTYPE: ::std::os::raw::c_uint = 124;
pub const ECANCELED: ::std::os::raw::c_uint = 125;
pub const ENOKEY: ::std::os::raw::c_uint = 126;
pub const EKEYEXPIRED: ::std::os::raw::c_uint = 127;
pub const EKEYREVOKED: ::std::os::raw::c_uint = 128;
pub const EKEYREJECTED: ::std::os::raw::c_uint = 129;
pub const EOWNERDEAD: ::std::os::raw::c_uint = 130;
pub const ENOTRECOVERABLE: ::std::os::raw::c_uint = 131;
pub const ERFKILL: ::std::os::raw::c_uint = 132;
pub const EHWPOISON: ::std::os::raw::c_uint = 133;
pub const ENOTSUP: ::std::os::raw::c_uint = 95;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const FF_LAMBDA_SHIFT: ::std::os::raw::c_uint = 7;
pub const FF_LAMBDA_SCALE: ::std::os::raw::c_uint = 128;
pub const FF_QP2LAMBDA: ::std::os::raw::c_uint = 118;
pub const FF_LAMBDA_MAX: ::std::os::raw::c_uint = 32767;
pub const FF_QUALITY_SCALE: ::std::os::raw::c_uint = 128;
pub const AV_TIME_BASE: ::std::os::raw::c_uint = 1000000;
pub const _INTTYPES_H: ::std::os::raw::c_uint = 1;
pub const ____gwchar_t_defined: ::std::os::raw::c_uint = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\x00";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\x00";
pub const PRId8: &'static [u8; 2usize] = b"d\x00";
pub const PRId16: &'static [u8; 2usize] = b"d\x00";
pub const PRId32: &'static [u8; 2usize] = b"d\x00";
pub const PRId64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIi8: &'static [u8; 2usize] = b"i\x00";
pub const PRIi16: &'static [u8; 2usize] = b"i\x00";
pub const PRIi32: &'static [u8; 2usize] = b"i\x00";
pub const PRIi64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIo8: &'static [u8; 2usize] = b"o\x00";
pub const PRIo16: &'static [u8; 2usize] = b"o\x00";
pub const PRIo32: &'static [u8; 2usize] = b"o\x00";
pub const PRIo64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIu8: &'static [u8; 2usize] = b"u\x00";
pub const PRIu16: &'static [u8; 2usize] = b"u\x00";
pub const PRIu32: &'static [u8; 2usize] = b"u\x00";
pub const PRIu64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIx8: &'static [u8; 2usize] = b"x\x00";
pub const PRIx16: &'static [u8; 2usize] = b"x\x00";
pub const PRIx32: &'static [u8; 2usize] = b"x\x00";
pub const PRIx64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIX8: &'static [u8; 2usize] = b"X\x00";
pub const PRIX16: &'static [u8; 2usize] = b"X\x00";
pub const PRIX32: &'static [u8; 2usize] = b"X\x00";
pub const PRIX64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\x00";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\x00";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\x00";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\x00";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\x00";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\x00";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\x00";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\x00";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\x00";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNd16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNd32: &'static [u8; 2usize] = b"d\x00";
pub const SCNd64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNi16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNi32: &'static [u8; 2usize] = b"i\x00";
pub const SCNi64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNu16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNu32: &'static [u8; 2usize] = b"u\x00";
pub const SCNu64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNo8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNo16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNo32: &'static [u8; 2usize] = b"o\x00";
pub const SCNo64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNx16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNx32: &'static [u8; 2usize] = b"x\x00";
pub const SCNx64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\x00";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\x00";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\x00";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\x00";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\x00";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\x00";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const _LIBC_LIMITS_H_: ::std::os::raw::c_uint = 1;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 16;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_uint = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uint = 127;
pub const MAX_CANON: ::std::os::raw::c_uint = 255;
pub const MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const PATH_MAX: ::std::os::raw::c_uint = 4096;
pub const PIPE_BUF: ::std::os::raw::c_uint = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 16384;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uint = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_uint = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uint = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_uint = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _BITS_POSIX2_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 255;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uint = 32767;
pub const _MATH_H: ::std::os::raw::c_uint = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: ::std::os::raw::c_uint = 1;
pub const _MATH_H_MATHDEF: ::std::os::raw::c_uint = 1;
pub const FP_ILOGB0: ::std::os::raw::c_int = -2147483648;
pub const FP_ILOGBNAN: ::std::os::raw::c_int = -2147483648;
pub const __MATH_DECLARING_DOUBLE: ::std::os::raw::c_uint = 1;
pub const __MATH_DECLARE_LDOUBLE: ::std::os::raw::c_uint = 1;
pub const MATH_ERRNO: ::std::os::raw::c_uint = 1;
pub const MATH_ERREXCEPT: ::std::os::raw::c_uint = 2;
pub const math_errhandling: ::std::os::raw::c_uint = 3;
pub const DOMAIN: ::std::os::raw::c_uint = 1;
pub const SING: ::std::os::raw::c_uint = 2;
pub const OVERFLOW: ::std::os::raw::c_uint = 3;
pub const UNDERFLOW: ::std::os::raw::c_uint = 4;
pub const TLOSS: ::std::os::raw::c_uint = 5;
pub const PLOSS: ::std::os::raw::c_uint = 6;
pub const M_E: f32 = 2.718281828459045;
pub const M_LOG2E: f32 = 1.4426950408889634;
pub const M_LOG10E: f32 = 0.4342944819032518;
pub const M_LN2: f32 = 0.6931471805599453;
pub const M_LN10: f32 = 2.302585092994046;
pub const M_PI: f32 = 3.141592653589793;
pub const M_PI_2: f32 = 1.5707963267948966;
pub const M_PI_4: f32 = 0.7853981633974483;
pub const M_1_PI: f32 = 0.3183098861837907;
pub const M_2_PI: f32 = 0.6366197723675814;
pub const M_2_SQRTPI: f32 = 1.1283791670955126;
pub const M_SQRT2: f32 = 1.4142135623730951;
pub const M_SQRT1_2: f32 = 0.7071067811865476;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __ENUM_IDTYPE_T: ::std::os::raw::c_uint = 1;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const _STRING_H: ::std::os::raw::c_uint = 1;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const LIBAVUTIL_VERSION_MAJOR: ::std::os::raw::c_uint = 55;
pub const LIBAVUTIL_VERSION_MINOR: ::std::os::raw::c_uint = 17;
pub const LIBAVUTIL_VERSION_MICRO: ::std::os::raw::c_uint = 103;
pub const AV_HAVE_BIGENDIAN: ::std::os::raw::c_uint = 0;
pub const AV_HAVE_FAST_UNALIGNED: ::std::os::raw::c_uint = 1;
pub const AV_HAVE_INCOMPATIBLE_LIBAV_ABI: ::std::os::raw::c_uint = 0;
pub const AVERROR_EXPERIMENTAL: ::std::os::raw::c_int = -733130664;
pub const AVERROR_INPUT_CHANGED: ::std::os::raw::c_int = -1668179713;
pub const AVERROR_OUTPUT_CHANGED: ::std::os::raw::c_int = -1668179714;
pub const AV_ERROR_MAX_STRING_SIZE: ::std::os::raw::c_uint = 64;
pub const M_LOG2_10: f32 = 3.321928094887362;
pub const M_PHI: f32 = 1.618033988749895;
pub const AV_LOG_QUIET: ::std::os::raw::c_int = -8;
pub const AV_LOG_PANIC: ::std::os::raw::c_uint = 0;
pub const AV_LOG_FATAL: ::std::os::raw::c_uint = 8;
pub const AV_LOG_ERROR: ::std::os::raw::c_uint = 16;
pub const AV_LOG_WARNING: ::std::os::raw::c_uint = 24;
pub const AV_LOG_INFO: ::std::os::raw::c_uint = 32;
pub const AV_LOG_VERBOSE: ::std::os::raw::c_uint = 40;
pub const AV_LOG_DEBUG: ::std::os::raw::c_uint = 48;
pub const AV_LOG_TRACE: ::std::os::raw::c_uint = 56;
pub const AV_LOG_MAX_OFFSET: ::std::os::raw::c_uint = 64;
pub const AV_LOG_SKIP_REPEATED: ::std::os::raw::c_uint = 1;
pub const AV_LOG_PRINT_LEVEL: ::std::os::raw::c_uint = 2;
pub const AVPALETTE_SIZE: ::std::os::raw::c_uint = 1024;
pub const AVPALETTE_COUNT: ::std::os::raw::c_uint = 256;
pub const AV_BUFFER_FLAG_READONLY: ::std::os::raw::c_uint = 1;
pub const AV_CPU_FLAG_FORCE: ::std::os::raw::c_uint = 2147483648;
pub const AV_CPU_FLAG_MMX: ::std::os::raw::c_uint = 1;
pub const AV_CPU_FLAG_MMXEXT: ::std::os::raw::c_uint = 2;
pub const AV_CPU_FLAG_MMX2: ::std::os::raw::c_uint = 2;
pub const AV_CPU_FLAG_3DNOW: ::std::os::raw::c_uint = 4;
pub const AV_CPU_FLAG_SSE: ::std::os::raw::c_uint = 8;
pub const AV_CPU_FLAG_SSE2: ::std::os::raw::c_uint = 16;
pub const AV_CPU_FLAG_SSE2SLOW: ::std::os::raw::c_uint = 1073741824;
pub const AV_CPU_FLAG_3DNOWEXT: ::std::os::raw::c_uint = 32;
pub const AV_CPU_FLAG_SSE3: ::std::os::raw::c_uint = 64;
pub const AV_CPU_FLAG_SSE3SLOW: ::std::os::raw::c_uint = 536870912;
pub const AV_CPU_FLAG_SSSE3: ::std::os::raw::c_uint = 128;
pub const AV_CPU_FLAG_ATOM: ::std::os::raw::c_uint = 268435456;
pub const AV_CPU_FLAG_SSE4: ::std::os::raw::c_uint = 256;
pub const AV_CPU_FLAG_SSE42: ::std::os::raw::c_uint = 512;
pub const AV_CPU_FLAG_AESNI: ::std::os::raw::c_uint = 524288;
pub const AV_CPU_FLAG_AVX: ::std::os::raw::c_uint = 16384;
pub const AV_CPU_FLAG_AVXSLOW: ::std::os::raw::c_uint = 134217728;
pub const AV_CPU_FLAG_XOP: ::std::os::raw::c_uint = 1024;
pub const AV_CPU_FLAG_FMA4: ::std::os::raw::c_uint = 2048;
pub const AV_CPU_FLAG_CMOV: ::std::os::raw::c_uint = 4096;
pub const AV_CPU_FLAG_AVX2: ::std::os::raw::c_uint = 32768;
pub const AV_CPU_FLAG_FMA3: ::std::os::raw::c_uint = 65536;
pub const AV_CPU_FLAG_BMI1: ::std::os::raw::c_uint = 131072;
pub const AV_CPU_FLAG_BMI2: ::std::os::raw::c_uint = 262144;
pub const AV_CPU_FLAG_ALTIVEC: ::std::os::raw::c_uint = 1;
pub const AV_CPU_FLAG_VSX: ::std::os::raw::c_uint = 2;
pub const AV_CPU_FLAG_POWER8: ::std::os::raw::c_uint = 4;
pub const AV_CPU_FLAG_ARMV5TE: ::std::os::raw::c_uint = 1;
pub const AV_CPU_FLAG_ARMV6: ::std::os::raw::c_uint = 2;
pub const AV_CPU_FLAG_ARMV6T2: ::std::os::raw::c_uint = 4;
pub const AV_CPU_FLAG_VFP: ::std::os::raw::c_uint = 8;
pub const AV_CPU_FLAG_VFPV3: ::std::os::raw::c_uint = 16;
pub const AV_CPU_FLAG_NEON: ::std::os::raw::c_uint = 32;
pub const AV_CPU_FLAG_ARMV8: ::std::os::raw::c_uint = 64;
pub const AV_CPU_FLAG_VFP_VM: ::std::os::raw::c_uint = 128;
pub const AV_CPU_FLAG_SETEND: ::std::os::raw::c_uint = 65536;
pub const AV_CH_FRONT_LEFT: ::std::os::raw::c_uint = 1;
pub const AV_CH_FRONT_RIGHT: ::std::os::raw::c_uint = 2;
pub const AV_CH_FRONT_CENTER: ::std::os::raw::c_uint = 4;
pub const AV_CH_LOW_FREQUENCY: ::std::os::raw::c_uint = 8;
pub const AV_CH_BACK_LEFT: ::std::os::raw::c_uint = 16;
pub const AV_CH_BACK_RIGHT: ::std::os::raw::c_uint = 32;
pub const AV_CH_FRONT_LEFT_OF_CENTER: ::std::os::raw::c_uint = 64;
pub const AV_CH_FRONT_RIGHT_OF_CENTER: ::std::os::raw::c_uint = 128;
pub const AV_CH_BACK_CENTER: ::std::os::raw::c_uint = 256;
pub const AV_CH_SIDE_LEFT: ::std::os::raw::c_uint = 512;
pub const AV_CH_SIDE_RIGHT: ::std::os::raw::c_uint = 1024;
pub const AV_CH_TOP_CENTER: ::std::os::raw::c_uint = 2048;
pub const AV_CH_TOP_FRONT_LEFT: ::std::os::raw::c_uint = 4096;
pub const AV_CH_TOP_FRONT_CENTER: ::std::os::raw::c_uint = 8192;
pub const AV_CH_TOP_FRONT_RIGHT: ::std::os::raw::c_uint = 16384;
pub const AV_CH_TOP_BACK_LEFT: ::std::os::raw::c_uint = 32768;
pub const AV_CH_TOP_BACK_CENTER: ::std::os::raw::c_uint = 65536;
pub const AV_CH_TOP_BACK_RIGHT: ::std::os::raw::c_uint = 131072;
pub const AV_CH_STEREO_LEFT: ::std::os::raw::c_uint = 536870912;
pub const AV_CH_STEREO_RIGHT: ::std::os::raw::c_uint = 1073741824;
pub const AV_CH_WIDE_LEFT: ::std::os::raw::c_uint = 2147483648;
pub const AV_CH_WIDE_RIGHT: ::std::os::raw::c_ulonglong = 4294967296;
pub const AV_CH_SURROUND_DIRECT_LEFT: ::std::os::raw::c_ulonglong =
    8589934592;
pub const AV_CH_SURROUND_DIRECT_RIGHT: ::std::os::raw::c_ulonglong =
    17179869184;
pub const AV_CH_LOW_FREQUENCY_2: ::std::os::raw::c_ulonglong = 34359738368;
pub const AV_CH_LAYOUT_NATIVE: ::std::os::raw::c_longlong =
    -9223372036854775808;
pub const AV_CH_LAYOUT_MONO: ::std::os::raw::c_uint = 4;
pub const AV_CH_LAYOUT_STEREO: ::std::os::raw::c_uint = 3;
pub const AV_CH_LAYOUT_2POINT1: ::std::os::raw::c_uint = 11;
pub const AV_CH_LAYOUT_2_1: ::std::os::raw::c_uint = 259;
pub const AV_CH_LAYOUT_SURROUND: ::std::os::raw::c_uint = 7;
pub const AV_CH_LAYOUT_3POINT1: ::std::os::raw::c_uint = 15;
pub const AV_CH_LAYOUT_4POINT0: ::std::os::raw::c_uint = 263;
pub const AV_CH_LAYOUT_4POINT1: ::std::os::raw::c_uint = 271;
pub const AV_CH_LAYOUT_2_2: ::std::os::raw::c_uint = 1539;
pub const AV_CH_LAYOUT_QUAD: ::std::os::raw::c_uint = 51;
pub const AV_CH_LAYOUT_5POINT0: ::std::os::raw::c_uint = 1543;
pub const AV_CH_LAYOUT_5POINT1: ::std::os::raw::c_uint = 1551;
pub const AV_CH_LAYOUT_5POINT0_BACK: ::std::os::raw::c_uint = 55;
pub const AV_CH_LAYOUT_5POINT1_BACK: ::std::os::raw::c_uint = 63;
pub const AV_CH_LAYOUT_6POINT0: ::std::os::raw::c_uint = 1799;
pub const AV_CH_LAYOUT_6POINT0_FRONT: ::std::os::raw::c_uint = 1731;
pub const AV_CH_LAYOUT_HEXAGONAL: ::std::os::raw::c_uint = 311;
pub const AV_CH_LAYOUT_6POINT1: ::std::os::raw::c_uint = 1807;
pub const AV_CH_LAYOUT_6POINT1_BACK: ::std::os::raw::c_uint = 319;
pub const AV_CH_LAYOUT_6POINT1_FRONT: ::std::os::raw::c_uint = 1739;
pub const AV_CH_LAYOUT_7POINT0: ::std::os::raw::c_uint = 1591;
pub const AV_CH_LAYOUT_7POINT0_FRONT: ::std::os::raw::c_uint = 1735;
pub const AV_CH_LAYOUT_7POINT1: ::std::os::raw::c_uint = 1599;
pub const AV_CH_LAYOUT_7POINT1_WIDE: ::std::os::raw::c_uint = 1743;
pub const AV_CH_LAYOUT_7POINT1_WIDE_BACK: ::std::os::raw::c_uint = 255;
pub const AV_CH_LAYOUT_OCTAGONAL: ::std::os::raw::c_uint = 1847;
pub const AV_CH_LAYOUT_HEXADECAGONAL: ::std::os::raw::c_ulonglong =
    6442710839;
pub const AV_CH_LAYOUT_STEREO_DOWNMIX: ::std::os::raw::c_uint = 1610612736;
pub const AV_DICT_MATCH_CASE: ::std::os::raw::c_uint = 1;
pub const AV_DICT_IGNORE_SUFFIX: ::std::os::raw::c_uint = 2;
pub const AV_DICT_DONT_STRDUP_KEY: ::std::os::raw::c_uint = 4;
pub const AV_DICT_DONT_STRDUP_VAL: ::std::os::raw::c_uint = 8;
pub const AV_DICT_DONT_OVERWRITE: ::std::os::raw::c_uint = 16;
pub const AV_DICT_APPEND: ::std::os::raw::c_uint = 32;
pub const AV_NUM_DATA_POINTERS: ::std::os::raw::c_uint = 8;
pub const AV_FRAME_FLAG_CORRUPT: ::std::os::raw::c_uint = 1;
pub const FF_DECODE_ERROR_INVALID_BITSTREAM: ::std::os::raw::c_uint = 1;
pub const FF_DECODE_ERROR_MISSING_REFERENCE: ::std::os::raw::c_uint = 2;
pub const LIBAVCODEC_VERSION_MAJOR: ::std::os::raw::c_uint = 57;
pub const LIBAVCODEC_VERSION_MINOR: ::std::os::raw::c_uint = 24;
pub const LIBAVCODEC_VERSION_MICRO: ::std::os::raw::c_uint = 102;
pub const AV_CODEC_PROP_INTRA_ONLY: ::std::os::raw::c_uint = 1;
pub const AV_CODEC_PROP_LOSSY: ::std::os::raw::c_uint = 2;
pub const AV_CODEC_PROP_LOSSLESS: ::std::os::raw::c_uint = 4;
pub const AV_CODEC_PROP_REORDER: ::std::os::raw::c_uint = 8;
pub const AV_CODEC_PROP_BITMAP_SUB: ::std::os::raw::c_uint = 65536;
pub const AV_CODEC_PROP_TEXT_SUB: ::std::os::raw::c_uint = 131072;
pub const AV_INPUT_BUFFER_PADDING_SIZE: ::std::os::raw::c_uint = 32;
pub const AV_INPUT_BUFFER_MIN_SIZE: ::std::os::raw::c_uint = 16384;
pub const FF_INPUT_BUFFER_PADDING_SIZE: ::std::os::raw::c_uint = 32;
pub const FF_MIN_BUFFER_SIZE: ::std::os::raw::c_uint = 16384;
pub const FF_MAX_B_FRAMES: ::std::os::raw::c_uint = 16;
pub const AV_CODEC_FLAG_UNALIGNED: ::std::os::raw::c_uint = 1;
pub const AV_CODEC_FLAG_QSCALE: ::std::os::raw::c_uint = 2;
pub const AV_CODEC_FLAG_4MV: ::std::os::raw::c_uint = 4;
pub const AV_CODEC_FLAG_OUTPUT_CORRUPT: ::std::os::raw::c_uint = 8;
pub const AV_CODEC_FLAG_QPEL: ::std::os::raw::c_uint = 16;
pub const AV_CODEC_FLAG_PASS1: ::std::os::raw::c_uint = 512;
pub const AV_CODEC_FLAG_PASS2: ::std::os::raw::c_uint = 1024;
pub const AV_CODEC_FLAG_LOOP_FILTER: ::std::os::raw::c_uint = 2048;
pub const AV_CODEC_FLAG_GRAY: ::std::os::raw::c_uint = 8192;
pub const AV_CODEC_FLAG_PSNR: ::std::os::raw::c_uint = 32768;
pub const AV_CODEC_FLAG_TRUNCATED: ::std::os::raw::c_uint = 65536;
pub const AV_CODEC_FLAG_INTERLACED_DCT: ::std::os::raw::c_uint = 262144;
pub const AV_CODEC_FLAG_LOW_DELAY: ::std::os::raw::c_uint = 524288;
pub const AV_CODEC_FLAG_GLOBAL_HEADER: ::std::os::raw::c_uint = 4194304;
pub const AV_CODEC_FLAG_BITEXACT: ::std::os::raw::c_uint = 8388608;
pub const AV_CODEC_FLAG_AC_PRED: ::std::os::raw::c_uint = 16777216;
pub const AV_CODEC_FLAG_INTERLACED_ME: ::std::os::raw::c_uint = 536870912;
pub const AV_CODEC_FLAG_CLOSED_GOP: ::std::os::raw::c_uint = 2147483648;
pub const AV_CODEC_FLAG2_FAST: ::std::os::raw::c_uint = 1;
pub const AV_CODEC_FLAG2_NO_OUTPUT: ::std::os::raw::c_uint = 4;
pub const AV_CODEC_FLAG2_LOCAL_HEADER: ::std::os::raw::c_uint = 8;
pub const AV_CODEC_FLAG2_DROP_FRAME_TIMECODE: ::std::os::raw::c_uint = 8192;
pub const AV_CODEC_FLAG2_CHUNKS: ::std::os::raw::c_uint = 32768;
pub const AV_CODEC_FLAG2_IGNORE_CROP: ::std::os::raw::c_uint = 65536;
pub const AV_CODEC_FLAG2_SHOW_ALL: ::std::os::raw::c_uint = 4194304;
pub const AV_CODEC_FLAG2_EXPORT_MVS: ::std::os::raw::c_uint = 268435456;
pub const AV_CODEC_FLAG2_SKIP_MANUAL: ::std::os::raw::c_uint = 536870912;
pub const AV_CODEC_CAP_DRAW_HORIZ_BAND: ::std::os::raw::c_uint = 1;
pub const AV_CODEC_CAP_DR1: ::std::os::raw::c_uint = 2;
pub const AV_CODEC_CAP_TRUNCATED: ::std::os::raw::c_uint = 8;
pub const AV_CODEC_CAP_DELAY: ::std::os::raw::c_uint = 32;
pub const AV_CODEC_CAP_SMALL_LAST_FRAME: ::std::os::raw::c_uint = 64;
pub const AV_CODEC_CAP_HWACCEL_VDPAU: ::std::os::raw::c_uint = 128;
pub const AV_CODEC_CAP_SUBFRAMES: ::std::os::raw::c_uint = 256;
pub const AV_CODEC_CAP_EXPERIMENTAL: ::std::os::raw::c_uint = 512;
pub const AV_CODEC_CAP_CHANNEL_CONF: ::std::os::raw::c_uint = 1024;
pub const AV_CODEC_CAP_FRAME_THREADS: ::std::os::raw::c_uint = 4096;
pub const AV_CODEC_CAP_SLICE_THREADS: ::std::os::raw::c_uint = 8192;
pub const AV_CODEC_CAP_PARAM_CHANGE: ::std::os::raw::c_uint = 16384;
pub const AV_CODEC_CAP_AUTO_THREADS: ::std::os::raw::c_uint = 32768;
pub const AV_CODEC_CAP_VARIABLE_FRAME_SIZE: ::std::os::raw::c_uint = 65536;
pub const AV_CODEC_CAP_INTRA_ONLY: ::std::os::raw::c_uint = 1073741824;
pub const AV_CODEC_CAP_LOSSLESS: ::std::os::raw::c_uint = 2147483648;
pub const CODEC_FLAG_UNALIGNED: ::std::os::raw::c_uint = 1;
pub const CODEC_FLAG_QSCALE: ::std::os::raw::c_uint = 2;
pub const CODEC_FLAG_4MV: ::std::os::raw::c_uint = 4;
pub const CODEC_FLAG_OUTPUT_CORRUPT: ::std::os::raw::c_uint = 8;
pub const CODEC_FLAG_QPEL: ::std::os::raw::c_uint = 16;
pub const CODEC_FLAG_GMC: ::std::os::raw::c_uint = 32;
pub const CODEC_FLAG_MV0: ::std::os::raw::c_uint = 64;
pub const CODEC_FLAG_INPUT_PRESERVED: ::std::os::raw::c_uint = 256;
pub const CODEC_FLAG_PASS1: ::std::os::raw::c_uint = 512;
pub const CODEC_FLAG_PASS2: ::std::os::raw::c_uint = 1024;
pub const CODEC_FLAG_GRAY: ::std::os::raw::c_uint = 8192;
pub const CODEC_FLAG_EMU_EDGE: ::std::os::raw::c_uint = 16384;
pub const CODEC_FLAG_PSNR: ::std::os::raw::c_uint = 32768;
pub const CODEC_FLAG_TRUNCATED: ::std::os::raw::c_uint = 65536;
pub const CODEC_FLAG_NORMALIZE_AQP: ::std::os::raw::c_uint = 131072;
pub const CODEC_FLAG_INTERLACED_DCT: ::std::os::raw::c_uint = 262144;
pub const CODEC_FLAG_LOW_DELAY: ::std::os::raw::c_uint = 524288;
pub const CODEC_FLAG_GLOBAL_HEADER: ::std::os::raw::c_uint = 4194304;
pub const CODEC_FLAG_BITEXACT: ::std::os::raw::c_uint = 8388608;
pub const CODEC_FLAG_AC_PRED: ::std::os::raw::c_uint = 16777216;
pub const CODEC_FLAG_LOOP_FILTER: ::std::os::raw::c_uint = 2048;
pub const CODEC_FLAG_INTERLACED_ME: ::std::os::raw::c_uint = 536870912;
pub const CODEC_FLAG_CLOSED_GOP: ::std::os::raw::c_uint = 2147483648;
pub const CODEC_FLAG2_FAST: ::std::os::raw::c_uint = 1;
pub const CODEC_FLAG2_NO_OUTPUT: ::std::os::raw::c_uint = 4;
pub const CODEC_FLAG2_LOCAL_HEADER: ::std::os::raw::c_uint = 8;
pub const CODEC_FLAG2_DROP_FRAME_TIMECODE: ::std::os::raw::c_uint = 8192;
pub const CODEC_FLAG2_IGNORE_CROP: ::std::os::raw::c_uint = 65536;
pub const CODEC_FLAG2_CHUNKS: ::std::os::raw::c_uint = 32768;
pub const CODEC_FLAG2_SHOW_ALL: ::std::os::raw::c_uint = 4194304;
pub const CODEC_FLAG2_EXPORT_MVS: ::std::os::raw::c_uint = 268435456;
pub const CODEC_FLAG2_SKIP_MANUAL: ::std::os::raw::c_uint = 536870912;
pub const CODEC_CAP_DRAW_HORIZ_BAND: ::std::os::raw::c_uint = 1;
pub const CODEC_CAP_DR1: ::std::os::raw::c_uint = 2;
pub const CODEC_CAP_TRUNCATED: ::std::os::raw::c_uint = 8;
pub const CODEC_CAP_HWACCEL: ::std::os::raw::c_uint = 16;
pub const CODEC_CAP_DELAY: ::std::os::raw::c_uint = 32;
pub const CODEC_CAP_SMALL_LAST_FRAME: ::std::os::raw::c_uint = 64;
pub const CODEC_CAP_HWACCEL_VDPAU: ::std::os::raw::c_uint = 128;
pub const CODEC_CAP_SUBFRAMES: ::std::os::raw::c_uint = 256;
pub const CODEC_CAP_EXPERIMENTAL: ::std::os::raw::c_uint = 512;
pub const CODEC_CAP_CHANNEL_CONF: ::std::os::raw::c_uint = 1024;
pub const CODEC_CAP_NEG_LINESIZES: ::std::os::raw::c_uint = 2048;
pub const CODEC_CAP_FRAME_THREADS: ::std::os::raw::c_uint = 4096;
pub const CODEC_CAP_SLICE_THREADS: ::std::os::raw::c_uint = 8192;
pub const CODEC_CAP_PARAM_CHANGE: ::std::os::raw::c_uint = 16384;
pub const CODEC_CAP_AUTO_THREADS: ::std::os::raw::c_uint = 32768;
pub const CODEC_CAP_VARIABLE_FRAME_SIZE: ::std::os::raw::c_uint = 65536;
pub const CODEC_CAP_INTRA_ONLY: ::std::os::raw::c_uint = 1073741824;
pub const CODEC_CAP_LOSSLESS: ::std::os::raw::c_uint = 2147483648;
pub const HWACCEL_CODEC_CAP_EXPERIMENTAL: ::std::os::raw::c_uint = 512;
pub const MB_TYPE_INTRA4x4: ::std::os::raw::c_uint = 1;
pub const MB_TYPE_INTRA16x16: ::std::os::raw::c_uint = 2;
pub const MB_TYPE_INTRA_PCM: ::std::os::raw::c_uint = 4;
pub const MB_TYPE_16x16: ::std::os::raw::c_uint = 8;
pub const MB_TYPE_16x8: ::std::os::raw::c_uint = 16;
pub const MB_TYPE_8x16: ::std::os::raw::c_uint = 32;
pub const MB_TYPE_8x8: ::std::os::raw::c_uint = 64;
pub const MB_TYPE_INTERLACED: ::std::os::raw::c_uint = 128;
pub const MB_TYPE_DIRECT2: ::std::os::raw::c_uint = 256;
pub const MB_TYPE_ACPRED: ::std::os::raw::c_uint = 512;
pub const MB_TYPE_GMC: ::std::os::raw::c_uint = 1024;
pub const MB_TYPE_SKIP: ::std::os::raw::c_uint = 2048;
pub const MB_TYPE_P0L0: ::std::os::raw::c_uint = 4096;
pub const MB_TYPE_P1L0: ::std::os::raw::c_uint = 8192;
pub const MB_TYPE_P0L1: ::std::os::raw::c_uint = 16384;
pub const MB_TYPE_P1L1: ::std::os::raw::c_uint = 32768;
pub const MB_TYPE_L0: ::std::os::raw::c_uint = 12288;
pub const MB_TYPE_L1: ::std::os::raw::c_uint = 49152;
pub const MB_TYPE_L0L1: ::std::os::raw::c_uint = 61440;
pub const MB_TYPE_QUANT: ::std::os::raw::c_uint = 65536;
pub const MB_TYPE_CBP: ::std::os::raw::c_uint = 131072;
pub const FF_QSCALE_TYPE_MPEG1: ::std::os::raw::c_uint = 0;
pub const FF_QSCALE_TYPE_MPEG2: ::std::os::raw::c_uint = 1;
pub const FF_QSCALE_TYPE_H264: ::std::os::raw::c_uint = 2;
pub const FF_QSCALE_TYPE_VP56: ::std::os::raw::c_uint = 3;
pub const AV_GET_BUFFER_FLAG_REF: ::std::os::raw::c_uint = 1;
pub const AV_PKT_FLAG_KEY: ::std::os::raw::c_uint = 1;
pub const AV_PKT_FLAG_CORRUPT: ::std::os::raw::c_uint = 2;
pub const FF_COMPRESSION_DEFAULT: ::std::os::raw::c_int = -1;
pub const FF_ASPECT_EXTENDED: ::std::os::raw::c_uint = 15;
pub const FF_RC_STRATEGY_XVID: ::std::os::raw::c_uint = 1;
pub const FF_PRED_LEFT: ::std::os::raw::c_uint = 0;
pub const FF_PRED_PLANE: ::std::os::raw::c_uint = 1;
pub const FF_PRED_MEDIAN: ::std::os::raw::c_uint = 2;
pub const FF_CMP_SAD: ::std::os::raw::c_uint = 0;
pub const FF_CMP_SSE: ::std::os::raw::c_uint = 1;
pub const FF_CMP_SATD: ::std::os::raw::c_uint = 2;
pub const FF_CMP_DCT: ::std::os::raw::c_uint = 3;
pub const FF_CMP_PSNR: ::std::os::raw::c_uint = 4;
pub const FF_CMP_BIT: ::std::os::raw::c_uint = 5;
pub const FF_CMP_RD: ::std::os::raw::c_uint = 6;
pub const FF_CMP_ZERO: ::std::os::raw::c_uint = 7;
pub const FF_CMP_VSAD: ::std::os::raw::c_uint = 8;
pub const FF_CMP_VSSE: ::std::os::raw::c_uint = 9;
pub const FF_CMP_NSSE: ::std::os::raw::c_uint = 10;
pub const FF_CMP_W53: ::std::os::raw::c_uint = 11;
pub const FF_CMP_W97: ::std::os::raw::c_uint = 12;
pub const FF_CMP_DCTMAX: ::std::os::raw::c_uint = 13;
pub const FF_CMP_DCT264: ::std::os::raw::c_uint = 14;
pub const FF_CMP_CHROMA: ::std::os::raw::c_uint = 256;
pub const FF_DTG_AFD_SAME: ::std::os::raw::c_uint = 8;
pub const FF_DTG_AFD_4_3: ::std::os::raw::c_uint = 9;
pub const FF_DTG_AFD_16_9: ::std::os::raw::c_uint = 10;
pub const FF_DTG_AFD_14_9: ::std::os::raw::c_uint = 11;
pub const FF_DTG_AFD_4_3_SP_14_9: ::std::os::raw::c_uint = 13;
pub const FF_DTG_AFD_16_9_SP_14_9: ::std::os::raw::c_uint = 14;
pub const FF_DTG_AFD_SP_4_3: ::std::os::raw::c_uint = 15;
pub const FF_DEFAULT_QUANT_BIAS: ::std::os::raw::c_uint = 999999;
pub const SLICE_FLAG_CODED_ORDER: ::std::os::raw::c_uint = 1;
pub const SLICE_FLAG_ALLOW_FIELD: ::std::os::raw::c_uint = 2;
pub const SLICE_FLAG_ALLOW_PLANE: ::std::os::raw::c_uint = 4;
pub const FF_MB_DECISION_SIMPLE: ::std::os::raw::c_uint = 0;
pub const FF_MB_DECISION_BITS: ::std::os::raw::c_uint = 1;
pub const FF_MB_DECISION_RD: ::std::os::raw::c_uint = 2;
pub const FF_CODER_TYPE_VLC: ::std::os::raw::c_uint = 0;
pub const FF_CODER_TYPE_AC: ::std::os::raw::c_uint = 1;
pub const FF_CODER_TYPE_RAW: ::std::os::raw::c_uint = 2;
pub const FF_CODER_TYPE_RLE: ::std::os::raw::c_uint = 3;
pub const FF_CODER_TYPE_DEFLATE: ::std::os::raw::c_uint = 4;
pub const FF_BUG_AUTODETECT: ::std::os::raw::c_uint = 1;
pub const FF_BUG_OLD_MSMPEG4: ::std::os::raw::c_uint = 2;
pub const FF_BUG_XVID_ILACE: ::std::os::raw::c_uint = 4;
pub const FF_BUG_UMP4: ::std::os::raw::c_uint = 8;
pub const FF_BUG_NO_PADDING: ::std::os::raw::c_uint = 16;
pub const FF_BUG_AMV: ::std::os::raw::c_uint = 32;
pub const FF_BUG_AC_VLC: ::std::os::raw::c_uint = 0;
pub const FF_BUG_QPEL_CHROMA: ::std::os::raw::c_uint = 64;
pub const FF_BUG_STD_QPEL: ::std::os::raw::c_uint = 128;
pub const FF_BUG_QPEL_CHROMA2: ::std::os::raw::c_uint = 256;
pub const FF_BUG_DIRECT_BLOCKSIZE: ::std::os::raw::c_uint = 512;
pub const FF_BUG_EDGE: ::std::os::raw::c_uint = 1024;
pub const FF_BUG_HPEL_CHROMA: ::std::os::raw::c_uint = 2048;
pub const FF_BUG_DC_CLIP: ::std::os::raw::c_uint = 4096;
pub const FF_BUG_MS: ::std::os::raw::c_uint = 8192;
pub const FF_BUG_TRUNCATED: ::std::os::raw::c_uint = 16384;
pub const FF_COMPLIANCE_VERY_STRICT: ::std::os::raw::c_uint = 2;
pub const FF_COMPLIANCE_STRICT: ::std::os::raw::c_uint = 1;
pub const FF_COMPLIANCE_NORMAL: ::std::os::raw::c_uint = 0;
pub const FF_COMPLIANCE_UNOFFICIAL: ::std::os::raw::c_int = -1;
pub const FF_COMPLIANCE_EXPERIMENTAL: ::std::os::raw::c_int = -2;
pub const FF_EC_GUESS_MVS: ::std::os::raw::c_uint = 1;
pub const FF_EC_DEBLOCK: ::std::os::raw::c_uint = 2;
pub const FF_EC_FAVOR_INTER: ::std::os::raw::c_uint = 256;
pub const FF_DEBUG_PICT_INFO: ::std::os::raw::c_uint = 1;
pub const FF_DEBUG_RC: ::std::os::raw::c_uint = 2;
pub const FF_DEBUG_BITSTREAM: ::std::os::raw::c_uint = 4;
pub const FF_DEBUG_MB_TYPE: ::std::os::raw::c_uint = 8;
pub const FF_DEBUG_QP: ::std::os::raw::c_uint = 16;
pub const FF_DEBUG_MV: ::std::os::raw::c_uint = 32;
pub const FF_DEBUG_DCT_COEFF: ::std::os::raw::c_uint = 64;
pub const FF_DEBUG_SKIP: ::std::os::raw::c_uint = 128;
pub const FF_DEBUG_STARTCODE: ::std::os::raw::c_uint = 256;
pub const FF_DEBUG_PTS: ::std::os::raw::c_uint = 512;
pub const FF_DEBUG_ER: ::std::os::raw::c_uint = 1024;
pub const FF_DEBUG_MMCO: ::std::os::raw::c_uint = 2048;
pub const FF_DEBUG_BUGS: ::std::os::raw::c_uint = 4096;
pub const FF_DEBUG_VIS_QP: ::std::os::raw::c_uint = 8192;
pub const FF_DEBUG_VIS_MB_TYPE: ::std::os::raw::c_uint = 16384;
pub const FF_DEBUG_BUFFERS: ::std::os::raw::c_uint = 32768;
pub const FF_DEBUG_THREADS: ::std::os::raw::c_uint = 65536;
pub const FF_DEBUG_GREEN_MD: ::std::os::raw::c_uint = 8388608;
pub const FF_DEBUG_NOMC: ::std::os::raw::c_uint = 16777216;
pub const FF_DEBUG_VIS_MV_P_FOR: ::std::os::raw::c_uint = 1;
pub const FF_DEBUG_VIS_MV_B_FOR: ::std::os::raw::c_uint = 2;
pub const FF_DEBUG_VIS_MV_B_BACK: ::std::os::raw::c_uint = 4;
pub const AV_EF_CRCCHECK: ::std::os::raw::c_uint = 1;
pub const AV_EF_BITSTREAM: ::std::os::raw::c_uint = 2;
pub const AV_EF_BUFFER: ::std::os::raw::c_uint = 4;
pub const AV_EF_EXPLODE: ::std::os::raw::c_uint = 8;
pub const AV_EF_IGNORE_ERR: ::std::os::raw::c_uint = 32768;
pub const AV_EF_CAREFUL: ::std::os::raw::c_uint = 65536;
pub const AV_EF_COMPLIANT: ::std::os::raw::c_uint = 131072;
pub const AV_EF_AGGRESSIVE: ::std::os::raw::c_uint = 262144;
pub const FF_DCT_AUTO: ::std::os::raw::c_uint = 0;
pub const FF_DCT_FASTINT: ::std::os::raw::c_uint = 1;
pub const FF_DCT_INT: ::std::os::raw::c_uint = 2;
pub const FF_DCT_MMX: ::std::os::raw::c_uint = 3;
pub const FF_DCT_ALTIVEC: ::std::os::raw::c_uint = 5;
pub const FF_DCT_FAAN: ::std::os::raw::c_uint = 6;
pub const FF_IDCT_AUTO: ::std::os::raw::c_uint = 0;
pub const FF_IDCT_INT: ::std::os::raw::c_uint = 1;
pub const FF_IDCT_SIMPLE: ::std::os::raw::c_uint = 2;
pub const FF_IDCT_SIMPLEMMX: ::std::os::raw::c_uint = 3;
pub const FF_IDCT_ARM: ::std::os::raw::c_uint = 7;
pub const FF_IDCT_ALTIVEC: ::std::os::raw::c_uint = 8;
pub const FF_IDCT_SH4: ::std::os::raw::c_uint = 9;
pub const FF_IDCT_SIMPLEARM: ::std::os::raw::c_uint = 10;
pub const FF_IDCT_IPP: ::std::os::raw::c_uint = 13;
pub const FF_IDCT_XVID: ::std::os::raw::c_uint = 14;
pub const FF_IDCT_XVIDMMX: ::std::os::raw::c_uint = 14;
pub const FF_IDCT_SIMPLEARMV5TE: ::std::os::raw::c_uint = 16;
pub const FF_IDCT_SIMPLEARMV6: ::std::os::raw::c_uint = 17;
pub const FF_IDCT_SIMPLEVIS: ::std::os::raw::c_uint = 18;
pub const FF_IDCT_FAAN: ::std::os::raw::c_uint = 20;
pub const FF_IDCT_SIMPLENEON: ::std::os::raw::c_uint = 22;
pub const FF_IDCT_SIMPLEALPHA: ::std::os::raw::c_uint = 23;
pub const FF_IDCT_SIMPLEAUTO: ::std::os::raw::c_uint = 128;
pub const FF_THREAD_FRAME: ::std::os::raw::c_uint = 1;
pub const FF_THREAD_SLICE: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_UNKNOWN: ::std::os::raw::c_int = -99;
pub const FF_PROFILE_RESERVED: ::std::os::raw::c_int = -100;
pub const FF_PROFILE_AAC_MAIN: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_AAC_LOW: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_AAC_SSR: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_AAC_LTP: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_AAC_HE: ::std::os::raw::c_uint = 4;
pub const FF_PROFILE_AAC_HE_V2: ::std::os::raw::c_uint = 28;
pub const FF_PROFILE_AAC_LD: ::std::os::raw::c_uint = 22;
pub const FF_PROFILE_AAC_ELD: ::std::os::raw::c_uint = 38;
pub const FF_PROFILE_MPEG2_AAC_LOW: ::std::os::raw::c_uint = 128;
pub const FF_PROFILE_MPEG2_AAC_HE: ::std::os::raw::c_uint = 131;
pub const FF_PROFILE_DTS: ::std::os::raw::c_uint = 20;
pub const FF_PROFILE_DTS_ES: ::std::os::raw::c_uint = 30;
pub const FF_PROFILE_DTS_96_24: ::std::os::raw::c_uint = 40;
pub const FF_PROFILE_DTS_HD_HRA: ::std::os::raw::c_uint = 50;
pub const FF_PROFILE_DTS_HD_MA: ::std::os::raw::c_uint = 60;
pub const FF_PROFILE_DTS_EXPRESS: ::std::os::raw::c_uint = 70;
pub const FF_PROFILE_MPEG2_422: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_MPEG2_HIGH: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_MPEG2_SS: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_MPEG2_SNR_SCALABLE: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_MPEG2_MAIN: ::std::os::raw::c_uint = 4;
pub const FF_PROFILE_MPEG2_SIMPLE: ::std::os::raw::c_uint = 5;
pub const FF_PROFILE_H264_CONSTRAINED: ::std::os::raw::c_uint = 512;
pub const FF_PROFILE_H264_INTRA: ::std::os::raw::c_uint = 2048;
pub const FF_PROFILE_H264_BASELINE: ::std::os::raw::c_uint = 66;
pub const FF_PROFILE_H264_CONSTRAINED_BASELINE: ::std::os::raw::c_uint = 578;
pub const FF_PROFILE_H264_MAIN: ::std::os::raw::c_uint = 77;
pub const FF_PROFILE_H264_EXTENDED: ::std::os::raw::c_uint = 88;
pub const FF_PROFILE_H264_HIGH: ::std::os::raw::c_uint = 100;
pub const FF_PROFILE_H264_HIGH_10: ::std::os::raw::c_uint = 110;
pub const FF_PROFILE_H264_HIGH_10_INTRA: ::std::os::raw::c_uint = 2158;
pub const FF_PROFILE_H264_HIGH_422: ::std::os::raw::c_uint = 122;
pub const FF_PROFILE_H264_HIGH_422_INTRA: ::std::os::raw::c_uint = 2170;
pub const FF_PROFILE_H264_HIGH_444: ::std::os::raw::c_uint = 144;
pub const FF_PROFILE_H264_HIGH_444_PREDICTIVE: ::std::os::raw::c_uint = 244;
pub const FF_PROFILE_H264_HIGH_444_INTRA: ::std::os::raw::c_uint = 2292;
pub const FF_PROFILE_H264_CAVLC_444: ::std::os::raw::c_uint = 44;
pub const FF_PROFILE_VC1_SIMPLE: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_VC1_MAIN: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_VC1_COMPLEX: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_VC1_ADVANCED: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_MPEG4_SIMPLE: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_MPEG4_SIMPLE_SCALABLE: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_MPEG4_CORE: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_MPEG4_MAIN: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_MPEG4_N_BIT: ::std::os::raw::c_uint = 4;
pub const FF_PROFILE_MPEG4_SCALABLE_TEXTURE: ::std::os::raw::c_uint = 5;
pub const FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION: ::std::os::raw::c_uint = 6;
pub const FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE: ::std::os::raw::c_uint = 7;
pub const FF_PROFILE_MPEG4_HYBRID: ::std::os::raw::c_uint = 8;
pub const FF_PROFILE_MPEG4_ADVANCED_REAL_TIME: ::std::os::raw::c_uint = 9;
pub const FF_PROFILE_MPEG4_CORE_SCALABLE: ::std::os::raw::c_uint = 10;
pub const FF_PROFILE_MPEG4_ADVANCED_CODING: ::std::os::raw::c_uint = 11;
pub const FF_PROFILE_MPEG4_ADVANCED_CORE: ::std::os::raw::c_uint = 12;
pub const FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE: ::std::os::raw::c_uint =
    13;
pub const FF_PROFILE_MPEG4_SIMPLE_STUDIO: ::std::os::raw::c_uint = 14;
pub const FF_PROFILE_MPEG4_ADVANCED_SIMPLE: ::std::os::raw::c_uint = 15;
pub const FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0: ::std::os::raw::c_uint =
    0;
pub const FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1: ::std::os::raw::c_uint =
    1;
pub const FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION: ::std::os::raw::c_uint =
    2;
pub const FF_PROFILE_JPEG2000_DCINEMA_2K: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_JPEG2000_DCINEMA_4K: ::std::os::raw::c_uint = 4;
pub const FF_PROFILE_VP9_0: ::std::os::raw::c_uint = 0;
pub const FF_PROFILE_VP9_1: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_VP9_2: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_VP9_3: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_HEVC_MAIN: ::std::os::raw::c_uint = 1;
pub const FF_PROFILE_HEVC_MAIN_10: ::std::os::raw::c_uint = 2;
pub const FF_PROFILE_HEVC_MAIN_STILL_PICTURE: ::std::os::raw::c_uint = 3;
pub const FF_PROFILE_HEVC_REXT: ::std::os::raw::c_uint = 4;
pub const FF_LEVEL_UNKNOWN: ::std::os::raw::c_int = -99;
pub const FF_SUB_CHARENC_MODE_DO_NOTHING: ::std::os::raw::c_int = -1;
pub const FF_SUB_CHARENC_MODE_AUTOMATIC: ::std::os::raw::c_uint = 0;
pub const FF_SUB_CHARENC_MODE_PRE_DECODER: ::std::os::raw::c_uint = 1;
pub const FF_CODEC_PROPERTY_LOSSLESS: ::std::os::raw::c_uint = 1;
pub const FF_CODEC_PROPERTY_CLOSED_CAPTIONS: ::std::os::raw::c_uint = 2;
pub const AV_HWACCEL_FLAG_IGNORE_LEVEL: ::std::os::raw::c_uint = 1;
pub const AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH: ::std::os::raw::c_uint = 2;
pub const AV_SUBTITLE_FLAG_FORCED: ::std::os::raw::c_uint = 1;
pub const AV_PARSER_PTS_NB: ::std::os::raw::c_uint = 4;
pub const PARSER_FLAG_COMPLETE_FRAMES: ::std::os::raw::c_uint = 1;
pub const PARSER_FLAG_ONCE: ::std::os::raw::c_uint = 2;
pub const PARSER_FLAG_FETCHED_OFFSET: ::std::os::raw::c_uint = 4;
pub const _TIME_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TIME_H: ::std::os::raw::c_uint = 1;
pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
pub const CLOCK_MONOTONIC_RAW: ::std::os::raw::c_uint = 4;
pub const CLOCK_REALTIME_COARSE: ::std::os::raw::c_uint = 5;
pub const CLOCK_MONOTONIC_COARSE: ::std::os::raw::c_uint = 6;
pub const CLOCK_BOOTTIME: ::std::os::raw::c_uint = 7;
pub const CLOCK_REALTIME_ALARM: ::std::os::raw::c_uint = 8;
pub const CLOCK_BOOTTIME_ALARM: ::std::os::raw::c_uint = 9;
pub const CLOCK_TAI: ::std::os::raw::c_uint = 11;
pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
pub const TIME_UTC: ::std::os::raw::c_uint = 1;
pub const LIBAVFORMAT_VERSION_MAJOR: ::std::os::raw::c_uint = 57;
pub const LIBAVFORMAT_VERSION_MINOR: ::std::os::raw::c_uint = 25;
pub const LIBAVFORMAT_VERSION_MICRO: ::std::os::raw::c_uint = 100;
pub const FF_API_R_FRAME_RATE: ::std::os::raw::c_uint = 1;
pub const AVIO_SEEKABLE_NORMAL: ::std::os::raw::c_uint = 1;
pub const AVSEEK_SIZE: ::std::os::raw::c_uint = 65536;
pub const AVSEEK_FORCE: ::std::os::raw::c_uint = 131072;
pub const AVIO_FLAG_READ: ::std::os::raw::c_uint = 1;
pub const AVIO_FLAG_WRITE: ::std::os::raw::c_uint = 2;
pub const AVIO_FLAG_READ_WRITE: ::std::os::raw::c_uint = 3;
pub const AVIO_FLAG_NONBLOCK: ::std::os::raw::c_uint = 8;
pub const AVIO_FLAG_DIRECT: ::std::os::raw::c_uint = 32768;
pub const AVPROBE_SCORE_EXTENSION: ::std::os::raw::c_uint = 50;
pub const AVPROBE_SCORE_MIME: ::std::os::raw::c_uint = 75;
pub const AVPROBE_SCORE_MAX: ::std::os::raw::c_uint = 100;
pub const AVPROBE_PADDING_SIZE: ::std::os::raw::c_uint = 32;
pub const AVFMT_NOFILE: ::std::os::raw::c_uint = 1;
pub const AVFMT_NEEDNUMBER: ::std::os::raw::c_uint = 2;
pub const AVFMT_SHOW_IDS: ::std::os::raw::c_uint = 8;
pub const AVFMT_RAWPICTURE: ::std::os::raw::c_uint = 32;
pub const AVFMT_GLOBALHEADER: ::std::os::raw::c_uint = 64;
pub const AVFMT_NOTIMESTAMPS: ::std::os::raw::c_uint = 128;
pub const AVFMT_GENERIC_INDEX: ::std::os::raw::c_uint = 256;
pub const AVFMT_TS_DISCONT: ::std::os::raw::c_uint = 512;
pub const AVFMT_VARIABLE_FPS: ::std::os::raw::c_uint = 1024;
pub const AVFMT_NODIMENSIONS: ::std::os::raw::c_uint = 2048;
pub const AVFMT_NOSTREAMS: ::std::os::raw::c_uint = 4096;
pub const AVFMT_NOBINSEARCH: ::std::os::raw::c_uint = 8192;
pub const AVFMT_NOGENSEARCH: ::std::os::raw::c_uint = 16384;
pub const AVFMT_NO_BYTE_SEEK: ::std::os::raw::c_uint = 32768;
pub const AVFMT_ALLOW_FLUSH: ::std::os::raw::c_uint = 65536;
pub const AVFMT_TS_NONSTRICT: ::std::os::raw::c_uint = 131072;
pub const AVFMT_TS_NEGATIVE: ::std::os::raw::c_uint = 262144;
pub const AVFMT_SEEK_TO_PTS: ::std::os::raw::c_uint = 67108864;
pub const AVINDEX_KEYFRAME: ::std::os::raw::c_uint = 1;
pub const AV_DISPOSITION_DEFAULT: ::std::os::raw::c_uint = 1;
pub const AV_DISPOSITION_DUB: ::std::os::raw::c_uint = 2;
pub const AV_DISPOSITION_ORIGINAL: ::std::os::raw::c_uint = 4;
pub const AV_DISPOSITION_COMMENT: ::std::os::raw::c_uint = 8;
pub const AV_DISPOSITION_LYRICS: ::std::os::raw::c_uint = 16;
pub const AV_DISPOSITION_KARAOKE: ::std::os::raw::c_uint = 32;
pub const AV_DISPOSITION_FORCED: ::std::os::raw::c_uint = 64;
pub const AV_DISPOSITION_HEARING_IMPAIRED: ::std::os::raw::c_uint = 128;
pub const AV_DISPOSITION_VISUAL_IMPAIRED: ::std::os::raw::c_uint = 256;
pub const AV_DISPOSITION_CLEAN_EFFECTS: ::std::os::raw::c_uint = 512;
pub const AV_DISPOSITION_ATTACHED_PIC: ::std::os::raw::c_uint = 1024;
pub const AV_DISPOSITION_CAPTIONS: ::std::os::raw::c_uint = 65536;
pub const AV_DISPOSITION_DESCRIPTIONS: ::std::os::raw::c_uint = 131072;
pub const AV_DISPOSITION_METADATA: ::std::os::raw::c_uint = 262144;
pub const AV_PTS_WRAP_IGNORE: ::std::os::raw::c_uint = 0;
pub const AV_PTS_WRAP_ADD_OFFSET: ::std::os::raw::c_uint = 1;
pub const AV_PTS_WRAP_SUB_OFFSET: ::std::os::raw::c_int = -1;
pub const AVSTREAM_EVENT_FLAG_METADATA_UPDATED: ::std::os::raw::c_uint = 1;
pub const MAX_STD_TIMEBASES: ::std::os::raw::c_uint = 399;
pub const AV_PROGRAM_RUNNING: ::std::os::raw::c_uint = 1;
pub const AVFMTCTX_NOHEADER: ::std::os::raw::c_uint = 1;
pub const AVFMT_FLAG_GENPTS: ::std::os::raw::c_uint = 1;
pub const AVFMT_FLAG_IGNIDX: ::std::os::raw::c_uint = 2;
pub const AVFMT_FLAG_NONBLOCK: ::std::os::raw::c_uint = 4;
pub const AVFMT_FLAG_IGNDTS: ::std::os::raw::c_uint = 8;
pub const AVFMT_FLAG_NOFILLIN: ::std::os::raw::c_uint = 16;
pub const AVFMT_FLAG_NOPARSE: ::std::os::raw::c_uint = 32;
pub const AVFMT_FLAG_NOBUFFER: ::std::os::raw::c_uint = 64;
pub const AVFMT_FLAG_CUSTOM_IO: ::std::os::raw::c_uint = 128;
pub const AVFMT_FLAG_DISCARD_CORRUPT: ::std::os::raw::c_uint = 256;
pub const AVFMT_FLAG_FLUSH_PACKETS: ::std::os::raw::c_uint = 512;
pub const AVFMT_FLAG_BITEXACT: ::std::os::raw::c_uint = 1024;
pub const AVFMT_FLAG_MP4A_LATM: ::std::os::raw::c_uint = 32768;
pub const AVFMT_FLAG_SORT_DTS: ::std::os::raw::c_uint = 65536;
pub const AVFMT_FLAG_PRIV_OPT: ::std::os::raw::c_uint = 131072;
pub const AVFMT_FLAG_KEEP_SIDE_DATA: ::std::os::raw::c_uint = 262144;
pub const AVFMT_FLAG_FAST_SEEK: ::std::os::raw::c_uint = 524288;
pub const FF_FDEBUG_TS: ::std::os::raw::c_uint = 1;
pub const AVFMT_EVENT_FLAG_METADATA_UPDATED: ::std::os::raw::c_uint = 1;
pub const AVFMT_AVOID_NEG_TS_AUTO: ::std::os::raw::c_int = -1;
pub const AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE: ::std::os::raw::c_uint = 1;
pub const AVFMT_AVOID_NEG_TS_MAKE_ZERO: ::std::os::raw::c_uint = 2;
pub const AVSEEK_FLAG_BACKWARD: ::std::os::raw::c_uint = 1;
pub const AVSEEK_FLAG_BYTE: ::std::os::raw::c_uint = 2;
pub const AVSEEK_FLAG_ANY: ::std::os::raw::c_uint = 4;
pub const AVSEEK_FLAG_FRAME: ::std::os::raw::c_uint = 8;
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn avutil_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn av_version_info() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avutil_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avutil_license() -> *const ::std::os::raw::c_char;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVMediaType {
    AVMEDIA_TYPE_UNKNOWN = -1,
    AVMEDIA_TYPE_VIDEO = 0,
    AVMEDIA_TYPE_AUDIO = 1,
    AVMEDIA_TYPE_DATA = 2,
    AVMEDIA_TYPE_SUBTITLE = 3,
    AVMEDIA_TYPE_ATTACHMENT = 4,
    AVMEDIA_TYPE_NB = 5,
}
extern "C" {
    pub fn av_get_media_type_string(media_type: AVMediaType)
     -> *const ::std::os::raw::c_char;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVPictureType {
    AV_PICTURE_TYPE_NONE = 0,
    AV_PICTURE_TYPE_I = 1,
    AV_PICTURE_TYPE_P = 2,
    AV_PICTURE_TYPE_B = 3,
    AV_PICTURE_TYPE_S = 4,
    AV_PICTURE_TYPE_SI = 5,
    AV_PICTURE_TYPE_SP = 6,
    AV_PICTURE_TYPE_BI = 7,
}
extern "C" {
    pub fn av_get_picture_type_char(pict_type: AVPictureType)
     -> ::std::os::raw::c_char;
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_1>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_1>() , 8usize);
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
pub type imaxdiv_t = _bindgen_ty_1;
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    #[link_name = "signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_2 = _bindgen_ty_2::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_2 = _bindgen_ty_2::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_2 = _bindgen_ty_2::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_2 = _bindgen_ty_2::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_2 = _bindgen_ty_2::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
pub const _IEEE_: _bindgen_ty_3 = _bindgen_ty_3::_IEEE_;
pub const _SVID_: _bindgen_ty_3 = _bindgen_ty_3::_SVID_;
pub const _XOPEN_: _bindgen_ty_3 = _bindgen_ty_3::_XOPEN_;
pub const _POSIX_: _bindgen_ty_3 = _bindgen_ty_3::_POSIX_;
pub const _ISOC_: _bindgen_ty_3 = _bindgen_ty_3::_ISOC_;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
pub use self::_bindgen_ty_3 as _LIB_VERSION_TYPE;
extern "C" {
    #[link_name = "_LIB_VERSION"]
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(::std::mem::size_of::<exception>() , 40usize);
    assert_eq!(::std::mem::align_of::<exception>() , 8usize);
}
impl Clone for exception {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_4 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>() , 4usize);
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
pub type __fsid_t = _bindgen_ty_4;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize);
    assert_eq!(::std::mem::align_of::<_IO_FILE>() , 8usize);
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5 {
    pub __count: ::std::os::raw::c_int,
    pub __value: _bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<::std::os::raw::c_uint>,
    pub __wchb: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5__bindgen_ty_1>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_5__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5>() , 4usize);
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
pub type __mbstate_t = _bindgen_ty_5;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6>() , 8usize);
}
impl Clone for _bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos_t = _bindgen_ty_6;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7>() , 8usize);
}
impl Clone for _bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos64_t = _bindgen_ty_7;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t([u8; 0]);
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize);
    assert_eq!(::std::mem::align_of::<_IO_marker>() , 8usize);
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus([u8; 0]);
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type wchar_t = ::std::os::raw::c_int;
pub const P_ALL: _bindgen_ty_8 = _bindgen_ty_8::P_ALL;
pub const P_PID: _bindgen_ty_8 = _bindgen_ty_8::P_PID;
pub const P_PGID: _bindgen_ty_8 = _bindgen_ty_8::P_PGID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub use self::_bindgen_ty_8 as idtype_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9>() , 4usize);
}
impl Clone for _bindgen_ty_9 {
    fn clone(&self) -> Self { *self }
}
pub type div_t = _bindgen_ty_9;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>() , 8usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub type ldiv_t = _bindgen_ty_10;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>() , 8usize);
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
pub type lldiv_t = _bindgen_ty_11;
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_12 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_12() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12>() , 8usize);
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
pub type __sigset_t = _bindgen_ty_12;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize);
    assert_eq!(::std::mem::align_of::<timespec>() , 8usize);
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize);
    assert_eq!(::std::mem::align_of::<timeval>() , 8usize);
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13 {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_13() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13>() , 8usize);
}
impl Clone for _bindgen_ty_13 {
    fn clone(&self) -> Self { *self }
}
pub type fd_set = _bindgen_ty_13;
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize);
    assert_eq!(::std::mem::align_of::<pthread_attr_t>() , 8usize);
}
impl Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize);
    assert_eq!(::std::mem::align_of::<__pthread_internal_list>() , 8usize);
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14 {
    pub __data: __BindgenUnionField<_bindgen_ty_14___pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14___pthread_mutex_s>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14___pthread_mutex_s>() ,
               8usize);
}
impl Clone for _bindgen_ty_14___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_14() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14>() , 40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14>() , 8usize);
}
impl Clone for _bindgen_ty_14 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_mutex_t = _bindgen_ty_14;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15 {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15>() , 4usize);
}
impl Clone for _bindgen_ty_15 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_mutexattr_t = _bindgen_ty_15;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_16 {
    pub __data: __BindgenUnionField<_bindgen_ty_16__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_16__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16__bindgen_ty_1>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_16__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_16() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16>() , 48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16>() , 8usize);
}
impl Clone for _bindgen_ty_16 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_cond_t = _bindgen_ty_16;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_17 {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_17() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17>() , 4usize);
}
impl Clone for _bindgen_ty_17 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_condattr_t = _bindgen_ty_17;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18 {
    pub __data: __BindgenUnionField<_bindgen_ty_18__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18__bindgen_ty_1>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_18__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_18() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18>() , 56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18>() , 8usize);
}
impl Clone for _bindgen_ty_18 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_rwlock_t = _bindgen_ty_18;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_19 {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout__bindgen_ty_19() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_19>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_19>() , 8usize);
}
impl Clone for _bindgen_ty_19 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_rwlockattr_t = _bindgen_ty_19;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_20 {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_20() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20>() , 8usize);
}
impl Clone for _bindgen_ty_20 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrier_t = _bindgen_ty_20;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_21 {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_21() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_21>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_21>() , 4usize);
}
impl Clone for _bindgen_ty_21 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrierattr_t = _bindgen_ty_21;
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize);
    assert_eq!(::std::mem::align_of::<random_data>() , 8usize);
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize);
    assert_eq!(::std::mem::align_of::<drand48_data>() , 8usize);
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct___locale_data([u8; 0]);
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>() , 232usize);
    assert_eq!(::std::mem::align_of::<__locale_struct>() , 8usize);
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize,
                     __l: __locale_t) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize)
     -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__xpg_strerror_r"]
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_log2(v: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_log2_16bit(v: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_22 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl Clone for _bindgen_ty_22 {
    fn clone(&self) -> Self { *self }
}
pub type max_align_t = _bindgen_ty_22;
extern "C" {
    pub fn av_strerror(errnum: ::std::os::raw::c_int,
                       errbuf: *mut ::std::os::raw::c_char,
                       errbuf_size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_realloc(ptr: *mut ::std::os::raw::c_void, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_realloc_f(ptr: *mut ::std::os::raw::c_void, nelem: usize,
                        elsize: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_reallocp(ptr: *mut ::std::os::raw::c_void, size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_realloc_array(ptr: *mut ::std::os::raw::c_void, nmemb: usize,
                            size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_reallocp_array(ptr: *mut ::std::os::raw::c_void, nmemb: usize,
                             size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn av_mallocz(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_calloc(nmemb: usize, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_strndup(s: *const ::std::os::raw::c_char, len: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_memdup(p: *const ::std::os::raw::c_void, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_freep(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn av_dynarray_add(tab_ptr: *mut ::std::os::raw::c_void,
                           nb_ptr: *mut ::std::os::raw::c_int,
                           elem: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn av_dynarray_add_nofree(tab_ptr: *mut ::std::os::raw::c_void,
                                  nb_ptr: *mut ::std::os::raw::c_int,
                                  elem: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_dynarray2_add(tab_ptr: *mut *mut ::std::os::raw::c_void,
                            nb_ptr: *mut ::std::os::raw::c_int,
                            elem_size: usize, elem_data: *const u8)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_max_alloc(max: usize);
}
extern "C" {
    pub fn av_memcpy_backptr(dst: *mut u8, back: ::std::os::raw::c_int,
                             cnt: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_fast_realloc(ptr: *mut ::std::os::raw::c_void,
                           size: *mut ::std::os::raw::c_uint, min_size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_fast_malloc(ptr: *mut ::std::os::raw::c_void,
                          size: *mut ::std::os::raw::c_uint, min_size: usize);
}
extern "C" {
    pub fn av_fast_mallocz(ptr: *mut ::std::os::raw::c_void,
                           size: *mut ::std::os::raw::c_uint,
                           min_size: usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVRational {
    pub num: ::std::os::raw::c_int,
    pub den: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVRational() {
    assert_eq!(::std::mem::size_of::<AVRational>() , 8usize);
    assert_eq!(::std::mem::align_of::<AVRational>() , 4usize);
}
impl Clone for AVRational {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn av_reduce(dst_num: *mut ::std::os::raw::c_int,
                     dst_den: *mut ::std::os::raw::c_int, num: i64, den: i64,
                     max: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_mul_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
    pub fn av_div_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
    pub fn av_add_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
    pub fn av_sub_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
    pub fn av_d2q(d: f64, max: ::std::os::raw::c_int) -> AVRational;
}
extern "C" {
    pub fn av_nearer_q(q: AVRational, q1: AVRational, q2: AVRational)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_find_nearest_q_idx(q: AVRational, q_list: *const AVRational)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_q2intfloat(q: AVRational) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct av_intfloat32 {
    pub i: __BindgenUnionField<u32>,
    pub f: __BindgenUnionField<f32>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_av_intfloat32() {
    assert_eq!(::std::mem::size_of::<av_intfloat32>() , 4usize);
    assert_eq!(::std::mem::align_of::<av_intfloat32>() , 4usize);
}
impl Clone for av_intfloat32 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct av_intfloat64 {
    pub i: __BindgenUnionField<u64>,
    pub f: __BindgenUnionField<f64>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_av_intfloat64() {
    assert_eq!(::std::mem::size_of::<av_intfloat64>() , 8usize);
    assert_eq!(::std::mem::align_of::<av_intfloat64>() , 8usize);
}
impl Clone for av_intfloat64 {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVRounding {
    AV_ROUND_ZERO = 0,
    AV_ROUND_INF = 1,
    AV_ROUND_DOWN = 2,
    AV_ROUND_UP = 3,
    AV_ROUND_NEAR_INF = 5,
    AV_ROUND_PASS_MINMAX = 8192,
}
extern "C" {
    pub fn av_gcd(a: i64, b: i64) -> i64;
}
extern "C" {
    pub fn av_rescale(a: i64, b: i64, c: i64) -> i64;
}
extern "C" {
    pub fn av_rescale_rnd(a: i64, b: i64, c: i64, arg1: AVRounding) -> i64;
}
extern "C" {
    pub fn av_rescale_q(a: i64, bq: AVRational, cq: AVRational) -> i64;
}
extern "C" {
    pub fn av_rescale_q_rnd(a: i64, bq: AVRational, cq: AVRational,
                            arg1: AVRounding) -> i64;
}
extern "C" {
    pub fn av_compare_ts(ts_a: i64, tb_a: AVRational, ts_b: i64,
                         tb_b: AVRational) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_compare_mod(a: u64, b: u64, mod_: u64) -> i64;
}
extern "C" {
    pub fn av_rescale_delta(in_tb: AVRational, in_ts: i64, fs_tb: AVRational,
                            duration: ::std::os::raw::c_int, last: *mut i64,
                            out_tb: AVRational) -> i64;
}
extern "C" {
    pub fn av_add_stable(ts_tb: AVRational, ts: i64, inc_tb: AVRational,
                         inc: i64) -> i64;
}
pub const AV_CLASS_CATEGORY_NA: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_NA;
pub const AV_CLASS_CATEGORY_INPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_INPUT;
pub const AV_CLASS_CATEGORY_OUTPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_OUTPUT;
pub const AV_CLASS_CATEGORY_MUXER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_MUXER;
pub const AV_CLASS_CATEGORY_DEMUXER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEMUXER;
pub const AV_CLASS_CATEGORY_ENCODER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_ENCODER;
pub const AV_CLASS_CATEGORY_DECODER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DECODER;
pub const AV_CLASS_CATEGORY_FILTER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_FILTER;
pub const AV_CLASS_CATEGORY_BITSTREAM_FILTER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_BITSTREAM_FILTER;
pub const AV_CLASS_CATEGORY_SWSCALER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_SWSCALER;
pub const AV_CLASS_CATEGORY_SWRESAMPLER: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_SWRESAMPLER;
pub const AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT;
pub const AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT;
pub const AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT;
pub const AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT;
pub const AV_CLASS_CATEGORY_DEVICE_OUTPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_OUTPUT;
pub const AV_CLASS_CATEGORY_DEVICE_INPUT: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_DEVICE_INPUT;
pub const AV_CLASS_CATEGORY_NB: _bindgen_ty_23 =
    _bindgen_ty_23::AV_CLASS_CATEGORY_NB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_23 {
    AV_CLASS_CATEGORY_NA = 0,
    AV_CLASS_CATEGORY_INPUT = 1,
    AV_CLASS_CATEGORY_OUTPUT = 2,
    AV_CLASS_CATEGORY_MUXER = 3,
    AV_CLASS_CATEGORY_DEMUXER = 4,
    AV_CLASS_CATEGORY_ENCODER = 5,
    AV_CLASS_CATEGORY_DECODER = 6,
    AV_CLASS_CATEGORY_FILTER = 7,
    AV_CLASS_CATEGORY_BITSTREAM_FILTER = 8,
    AV_CLASS_CATEGORY_SWSCALER = 9,
    AV_CLASS_CATEGORY_SWRESAMPLER = 10,
    AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT = 40,
    AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT = 41,
    AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT = 42,
    AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT = 43,
    AV_CLASS_CATEGORY_DEVICE_OUTPUT = 44,
    AV_CLASS_CATEGORY_DEVICE_INPUT = 45,
    AV_CLASS_CATEGORY_NB = 46,
}
pub use self::_bindgen_ty_23 as AVClassCategory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVOptionRanges([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVClass {
    pub class_name: *const ::std::os::raw::c_char,
    pub item_name: ::std::option::Option<unsafe extern "C" fn(ctx:
                                                                  *mut ::std::os::raw::c_void)
                                             ->
                                                 *const ::std::os::raw::c_char>,
    pub option: *const AVClass_AVOption,
    pub version: ::std::os::raw::c_int,
    pub log_level_offset_offset: ::std::os::raw::c_int,
    pub parent_log_context_offset: ::std::os::raw::c_int,
    pub child_next: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                   *mut ::std::os::raw::c_void,
                                                               prev:
                                                                   *mut ::std::os::raw::c_void)
                                              -> *mut ::std::os::raw::c_void>,
    pub child_class_next: ::std::option::Option<unsafe extern "C" fn(prev:
                                                                         *const AVClass)
                                                    -> *const AVClass>,
    pub category: AVClassCategory,
    pub get_category: ::std::option::Option<unsafe extern "C" fn(ctx:
                                                                     *mut ::std::os::raw::c_void)
                                                -> _bindgen_ty_23>,
    pub query_ranges: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut *mut AVOptionRanges,
                                                                 obj:
                                                                     *mut ::std::os::raw::c_void,
                                                                 key:
                                                                     *const ::std::os::raw::c_char,
                                                                 flags:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVClass_AVOption([u8; 0]);
#[test]
fn bindgen_test_layout_AVClass() {
    assert_eq!(::std::mem::size_of::<AVClass>() , 80usize);
    assert_eq!(::std::mem::align_of::<AVClass>() , 8usize);
}
impl Clone for AVClass {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn av_log(avcl: *mut ::std::os::raw::c_void,
                  level: ::std::os::raw::c_int,
                  fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn av_vlog(avcl: *mut ::std::os::raw::c_void,
                   level: ::std::os::raw::c_int,
                   fmt: *const ::std::os::raw::c_char,
                   vl: *mut __va_list_tag);
}
extern "C" {
    pub fn av_log_get_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_log_set_level(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_log_set_callback(callback:
                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut ::std::os::raw::c_void,
                                                                              arg2:
                                                                                  ::std::os::raw::c_int,
                                                                              arg3:
                                                                                  *const ::std::os::raw::c_char,
                                                                              arg4:
                                                                                  *mut __va_list_tag)>);
}
extern "C" {
    pub fn av_log_default_callback(avcl: *mut ::std::os::raw::c_void,
                                   level: ::std::os::raw::c_int,
                                   fmt: *const ::std::os::raw::c_char,
                                   vl: *mut __va_list_tag);
}
extern "C" {
    pub fn av_default_item_name(ctx: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_default_get_category(ptr: *mut ::std::os::raw::c_void)
     -> AVClassCategory;
}
extern "C" {
    pub fn av_log_format_line(ptr: *mut ::std::os::raw::c_void,
                              level: ::std::os::raw::c_int,
                              fmt: *const ::std::os::raw::c_char,
                              vl: *mut __va_list_tag,
                              line: *mut ::std::os::raw::c_char,
                              line_size: ::std::os::raw::c_int,
                              print_prefix: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_log_set_flags(arg: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_log_get_flags() -> ::std::os::raw::c_int;
}
pub const AVPixelFormat_AV_PIX_FMT_VAAPI: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_VAAPI_VLD;
pub const AVPixelFormat_AV_PIX_FMT_Y400A: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YA8;
pub const AVPixelFormat_AV_PIX_FMT_GRAY8A: AVPixelFormat =
    AVPixelFormat::AV_PIX_FMT_YA8;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVPixelFormat {
    AV_PIX_FMT_NONE = -1,
    AV_PIX_FMT_YUV420P = 0,
    AV_PIX_FMT_YUYV422 = 1,
    AV_PIX_FMT_RGB24 = 2,
    AV_PIX_FMT_BGR24 = 3,
    AV_PIX_FMT_YUV422P = 4,
    AV_PIX_FMT_YUV444P = 5,
    AV_PIX_FMT_YUV410P = 6,
    AV_PIX_FMT_YUV411P = 7,
    AV_PIX_FMT_GRAY8 = 8,
    AV_PIX_FMT_MONOWHITE = 9,
    AV_PIX_FMT_MONOBLACK = 10,
    AV_PIX_FMT_PAL8 = 11,
    AV_PIX_FMT_YUVJ420P = 12,
    AV_PIX_FMT_YUVJ422P = 13,
    AV_PIX_FMT_YUVJ444P = 14,
    AV_PIX_FMT_XVMC_MPEG2_MC = 15,
    AV_PIX_FMT_XVMC_MPEG2_IDCT = 16,
    AV_PIX_FMT_UYVY422 = 17,
    AV_PIX_FMT_UYYVYY411 = 18,
    AV_PIX_FMT_BGR8 = 19,
    AV_PIX_FMT_BGR4 = 20,
    AV_PIX_FMT_BGR4_BYTE = 21,
    AV_PIX_FMT_RGB8 = 22,
    AV_PIX_FMT_RGB4 = 23,
    AV_PIX_FMT_RGB4_BYTE = 24,
    AV_PIX_FMT_NV12 = 25,
    AV_PIX_FMT_NV21 = 26,
    AV_PIX_FMT_ARGB = 27,
    AV_PIX_FMT_RGBA = 28,
    AV_PIX_FMT_ABGR = 29,
    AV_PIX_FMT_BGRA = 30,
    AV_PIX_FMT_GRAY16BE = 31,
    AV_PIX_FMT_GRAY16LE = 32,
    AV_PIX_FMT_YUV440P = 33,
    AV_PIX_FMT_YUVJ440P = 34,
    AV_PIX_FMT_YUVA420P = 35,
    AV_PIX_FMT_VDPAU_H264 = 36,
    AV_PIX_FMT_VDPAU_MPEG1 = 37,
    AV_PIX_FMT_VDPAU_MPEG2 = 38,
    AV_PIX_FMT_VDPAU_WMV3 = 39,
    AV_PIX_FMT_VDPAU_VC1 = 40,
    AV_PIX_FMT_RGB48BE = 41,
    AV_PIX_FMT_RGB48LE = 42,
    AV_PIX_FMT_RGB565BE = 43,
    AV_PIX_FMT_RGB565LE = 44,
    AV_PIX_FMT_RGB555BE = 45,
    AV_PIX_FMT_RGB555LE = 46,
    AV_PIX_FMT_BGR565BE = 47,
    AV_PIX_FMT_BGR565LE = 48,
    AV_PIX_FMT_BGR555BE = 49,
    AV_PIX_FMT_BGR555LE = 50,
    AV_PIX_FMT_VAAPI_MOCO = 51,
    AV_PIX_FMT_VAAPI_IDCT = 52,
    AV_PIX_FMT_VAAPI_VLD = 53,
    AV_PIX_FMT_YUV420P16LE = 54,
    AV_PIX_FMT_YUV420P16BE = 55,
    AV_PIX_FMT_YUV422P16LE = 56,
    AV_PIX_FMT_YUV422P16BE = 57,
    AV_PIX_FMT_YUV444P16LE = 58,
    AV_PIX_FMT_YUV444P16BE = 59,
    AV_PIX_FMT_VDPAU_MPEG4 = 60,
    AV_PIX_FMT_DXVA2_VLD = 61,
    AV_PIX_FMT_RGB444LE = 62,
    AV_PIX_FMT_RGB444BE = 63,
    AV_PIX_FMT_BGR444LE = 64,
    AV_PIX_FMT_BGR444BE = 65,
    AV_PIX_FMT_YA8 = 66,
    AV_PIX_FMT_BGR48BE = 67,
    AV_PIX_FMT_BGR48LE = 68,
    AV_PIX_FMT_YUV420P9BE = 69,
    AV_PIX_FMT_YUV420P9LE = 70,
    AV_PIX_FMT_YUV420P10BE = 71,
    AV_PIX_FMT_YUV420P10LE = 72,
    AV_PIX_FMT_YUV422P10BE = 73,
    AV_PIX_FMT_YUV422P10LE = 74,
    AV_PIX_FMT_YUV444P9BE = 75,
    AV_PIX_FMT_YUV444P9LE = 76,
    AV_PIX_FMT_YUV444P10BE = 77,
    AV_PIX_FMT_YUV444P10LE = 78,
    AV_PIX_FMT_YUV422P9BE = 79,
    AV_PIX_FMT_YUV422P9LE = 80,
    AV_PIX_FMT_VDA_VLD = 81,
    AV_PIX_FMT_GBRP = 82,
    AV_PIX_FMT_GBRP9BE = 83,
    AV_PIX_FMT_GBRP9LE = 84,
    AV_PIX_FMT_GBRP10BE = 85,
    AV_PIX_FMT_GBRP10LE = 86,
    AV_PIX_FMT_GBRP16BE = 87,
    AV_PIX_FMT_GBRP16LE = 88,
    AV_PIX_FMT_YUVA422P = 89,
    AV_PIX_FMT_YUVA444P = 90,
    AV_PIX_FMT_YUVA420P9BE = 91,
    AV_PIX_FMT_YUVA420P9LE = 92,
    AV_PIX_FMT_YUVA422P9BE = 93,
    AV_PIX_FMT_YUVA422P9LE = 94,
    AV_PIX_FMT_YUVA444P9BE = 95,
    AV_PIX_FMT_YUVA444P9LE = 96,
    AV_PIX_FMT_YUVA420P10BE = 97,
    AV_PIX_FMT_YUVA420P10LE = 98,
    AV_PIX_FMT_YUVA422P10BE = 99,
    AV_PIX_FMT_YUVA422P10LE = 100,
    AV_PIX_FMT_YUVA444P10BE = 101,
    AV_PIX_FMT_YUVA444P10LE = 102,
    AV_PIX_FMT_YUVA420P16BE = 103,
    AV_PIX_FMT_YUVA420P16LE = 104,
    AV_PIX_FMT_YUVA422P16BE = 105,
    AV_PIX_FMT_YUVA422P16LE = 106,
    AV_PIX_FMT_YUVA444P16BE = 107,
    AV_PIX_FMT_YUVA444P16LE = 108,
    AV_PIX_FMT_VDPAU = 109,
    AV_PIX_FMT_XYZ12LE = 110,
    AV_PIX_FMT_XYZ12BE = 111,
    AV_PIX_FMT_NV16 = 112,
    AV_PIX_FMT_NV20LE = 113,
    AV_PIX_FMT_NV20BE = 114,
    AV_PIX_FMT_RGBA64BE = 115,
    AV_PIX_FMT_RGBA64LE = 116,
    AV_PIX_FMT_BGRA64BE = 117,
    AV_PIX_FMT_BGRA64LE = 118,
    AV_PIX_FMT_YVYU422 = 119,
    AV_PIX_FMT_VDA = 120,
    AV_PIX_FMT_YA16BE = 121,
    AV_PIX_FMT_YA16LE = 122,
    AV_PIX_FMT_GBRAP = 123,
    AV_PIX_FMT_GBRAP16BE = 124,
    AV_PIX_FMT_GBRAP16LE = 125,
    AV_PIX_FMT_QSV = 126,
    AV_PIX_FMT_MMAL = 127,
    AV_PIX_FMT_D3D11VA_VLD = 128,
    AV_PIX_FMT_0RGB = 295,
    AV_PIX_FMT_RGB0 = 296,
    AV_PIX_FMT_0BGR = 297,
    AV_PIX_FMT_BGR0 = 298,
    AV_PIX_FMT_YUV420P12BE = 299,
    AV_PIX_FMT_YUV420P12LE = 300,
    AV_PIX_FMT_YUV420P14BE = 301,
    AV_PIX_FMT_YUV420P14LE = 302,
    AV_PIX_FMT_YUV422P12BE = 303,
    AV_PIX_FMT_YUV422P12LE = 304,
    AV_PIX_FMT_YUV422P14BE = 305,
    AV_PIX_FMT_YUV422P14LE = 306,
    AV_PIX_FMT_YUV444P12BE = 307,
    AV_PIX_FMT_YUV444P12LE = 308,
    AV_PIX_FMT_YUV444P14BE = 309,
    AV_PIX_FMT_YUV444P14LE = 310,
    AV_PIX_FMT_GBRP12BE = 311,
    AV_PIX_FMT_GBRP12LE = 312,
    AV_PIX_FMT_GBRP14BE = 313,
    AV_PIX_FMT_GBRP14LE = 314,
    AV_PIX_FMT_YUVJ411P = 315,
    AV_PIX_FMT_BAYER_BGGR8 = 316,
    AV_PIX_FMT_BAYER_RGGB8 = 317,
    AV_PIX_FMT_BAYER_GBRG8 = 318,
    AV_PIX_FMT_BAYER_GRBG8 = 319,
    AV_PIX_FMT_BAYER_BGGR16LE = 320,
    AV_PIX_FMT_BAYER_BGGR16BE = 321,
    AV_PIX_FMT_BAYER_RGGB16LE = 322,
    AV_PIX_FMT_BAYER_RGGB16BE = 323,
    AV_PIX_FMT_BAYER_GBRG16LE = 324,
    AV_PIX_FMT_BAYER_GBRG16BE = 325,
    AV_PIX_FMT_BAYER_GRBG16LE = 326,
    AV_PIX_FMT_BAYER_GRBG16BE = 327,
    AV_PIX_FMT_YUV440P10LE = 328,
    AV_PIX_FMT_YUV440P10BE = 329,
    AV_PIX_FMT_YUV440P12LE = 330,
    AV_PIX_FMT_YUV440P12BE = 331,
    AV_PIX_FMT_AYUV64LE = 332,
    AV_PIX_FMT_AYUV64BE = 333,
    AV_PIX_FMT_VIDEOTOOLBOX = 334,
    AV_PIX_FMT_P010LE = 335,
    AV_PIX_FMT_P010BE = 336,
    AV_PIX_FMT_NB = 337,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVColorPrimaries {
    AVCOL_PRI_RESERVED0 = 0,
    AVCOL_PRI_BT709 = 1,
    AVCOL_PRI_UNSPECIFIED = 2,
    AVCOL_PRI_RESERVED = 3,
    AVCOL_PRI_BT470M = 4,
    AVCOL_PRI_BT470BG = 5,
    AVCOL_PRI_SMPTE170M = 6,
    AVCOL_PRI_SMPTE240M = 7,
    AVCOL_PRI_FILM = 8,
    AVCOL_PRI_BT2020 = 9,
    AVCOL_PRI_SMPTEST428_1 = 10,
    AVCOL_PRI_NB = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVColorTransferCharacteristic {
    AVCOL_TRC_RESERVED0 = 0,
    AVCOL_TRC_BT709 = 1,
    AVCOL_TRC_UNSPECIFIED = 2,
    AVCOL_TRC_RESERVED = 3,
    AVCOL_TRC_GAMMA22 = 4,
    AVCOL_TRC_GAMMA28 = 5,
    AVCOL_TRC_SMPTE170M = 6,
    AVCOL_TRC_SMPTE240M = 7,
    AVCOL_TRC_LINEAR = 8,
    AVCOL_TRC_LOG = 9,
    AVCOL_TRC_LOG_SQRT = 10,
    AVCOL_TRC_IEC61966_2_4 = 11,
    AVCOL_TRC_BT1361_ECG = 12,
    AVCOL_TRC_IEC61966_2_1 = 13,
    AVCOL_TRC_BT2020_10 = 14,
    AVCOL_TRC_BT2020_12 = 15,
    AVCOL_TRC_SMPTEST2084 = 16,
    AVCOL_TRC_SMPTEST428_1 = 17,
    AVCOL_TRC_NB = 18,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVColorSpace {
    AVCOL_SPC_RGB = 0,
    AVCOL_SPC_BT709 = 1,
    AVCOL_SPC_UNSPECIFIED = 2,
    AVCOL_SPC_RESERVED = 3,
    AVCOL_SPC_FCC = 4,
    AVCOL_SPC_BT470BG = 5,
    AVCOL_SPC_SMPTE170M = 6,
    AVCOL_SPC_SMPTE240M = 7,
    AVCOL_SPC_YCOCG = 8,
    AVCOL_SPC_BT2020_NCL = 9,
    AVCOL_SPC_BT2020_CL = 10,
    AVCOL_SPC_NB = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVColorRange {
    AVCOL_RANGE_UNSPECIFIED = 0,
    AVCOL_RANGE_MPEG = 1,
    AVCOL_RANGE_JPEG = 2,
    AVCOL_RANGE_NB = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVChromaLocation {
    AVCHROMA_LOC_UNSPECIFIED = 0,
    AVCHROMA_LOC_LEFT = 1,
    AVCHROMA_LOC_CENTER = 2,
    AVCHROMA_LOC_TOPLEFT = 3,
    AVCHROMA_LOC_TOP = 4,
    AVCHROMA_LOC_BOTTOMLEFT = 5,
    AVCHROMA_LOC_BOTTOM = 6,
    AVCHROMA_LOC_NB = 7,
}
extern "C" {
    pub fn av_int_list_length_for_size(elsize: ::std::os::raw::c_uint,
                                       list: *const ::std::os::raw::c_void,
                                       term: u64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn av_fopen_utf8(path: *const ::std::os::raw::c_char,
                         mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn av_get_time_base_q() -> AVRational;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVSampleFormat {
    AV_SAMPLE_FMT_NONE = -1,
    AV_SAMPLE_FMT_U8 = 0,
    AV_SAMPLE_FMT_S16 = 1,
    AV_SAMPLE_FMT_S32 = 2,
    AV_SAMPLE_FMT_FLT = 3,
    AV_SAMPLE_FMT_DBL = 4,
    AV_SAMPLE_FMT_U8P = 5,
    AV_SAMPLE_FMT_S16P = 6,
    AV_SAMPLE_FMT_S32P = 7,
    AV_SAMPLE_FMT_FLTP = 8,
    AV_SAMPLE_FMT_DBLP = 9,
    AV_SAMPLE_FMT_NB = 10,
}
extern "C" {
    pub fn av_get_sample_fmt_name(sample_fmt: AVSampleFormat)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_get_sample_fmt(name: *const ::std::os::raw::c_char)
     -> AVSampleFormat;
}
extern "C" {
    pub fn av_get_alt_sample_fmt(sample_fmt: AVSampleFormat,
                                 planar: ::std::os::raw::c_int)
     -> AVSampleFormat;
}
extern "C" {
    pub fn av_get_packed_sample_fmt(sample_fmt: AVSampleFormat)
     -> AVSampleFormat;
}
extern "C" {
    pub fn av_get_planar_sample_fmt(sample_fmt: AVSampleFormat)
     -> AVSampleFormat;
}
extern "C" {
    pub fn av_get_sample_fmt_string(buf: *mut ::std::os::raw::c_char,
                                    buf_size: ::std::os::raw::c_int,
                                    sample_fmt: AVSampleFormat)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_get_bytes_per_sample(sample_fmt: AVSampleFormat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_sample_fmt_is_planar(sample_fmt: AVSampleFormat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_samples_get_buffer_size(linesize: *mut ::std::os::raw::c_int,
                                      nb_channels: ::std::os::raw::c_int,
                                      nb_samples: ::std::os::raw::c_int,
                                      sample_fmt: AVSampleFormat,
                                      align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_samples_fill_arrays(audio_data: *mut *mut u8,
                                  linesize: *mut ::std::os::raw::c_int,
                                  buf: *const u8,
                                  nb_channels: ::std::os::raw::c_int,
                                  nb_samples: ::std::os::raw::c_int,
                                  sample_fmt: AVSampleFormat,
                                  align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_samples_alloc(audio_data: *mut *mut u8,
                            linesize: *mut ::std::os::raw::c_int,
                            nb_channels: ::std::os::raw::c_int,
                            nb_samples: ::std::os::raw::c_int,
                            sample_fmt: AVSampleFormat,
                            align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_samples_alloc_array_and_samples(audio_data: *mut *mut *mut u8,
                                              linesize:
                                                  *mut ::std::os::raw::c_int,
                                              nb_channels:
                                                  ::std::os::raw::c_int,
                                              nb_samples:
                                                  ::std::os::raw::c_int,
                                              sample_fmt: AVSampleFormat,
                                              align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_samples_copy(dst: *mut *mut u8, src: *const *const u8,
                           dst_offset: ::std::os::raw::c_int,
                           src_offset: ::std::os::raw::c_int,
                           nb_samples: ::std::os::raw::c_int,
                           nb_channels: ::std::os::raw::c_int,
                           sample_fmt: AVSampleFormat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_samples_set_silence(audio_data: *mut *mut u8,
                                  offset: ::std::os::raw::c_int,
                                  nb_samples: ::std::os::raw::c_int,
                                  nb_channels: ::std::os::raw::c_int,
                                  sample_fmt: AVSampleFormat)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBuffer([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVBufferRef {
    pub buffer: *mut AVBuffer,
    pub data: *mut u8,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVBufferRef() {
    assert_eq!(::std::mem::size_of::<AVBufferRef>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVBufferRef>() , 8usize);
}
impl Clone for AVBufferRef {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn av_buffer_alloc(size: ::std::os::raw::c_int) -> *mut AVBufferRef;
}
extern "C" {
    pub fn av_buffer_allocz(size: ::std::os::raw::c_int) -> *mut AVBufferRef;
}
extern "C" {
    pub fn av_buffer_create(data: *mut u8, size: ::std::os::raw::c_int,
                            free:
                                ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                               *mut ::std::os::raw::c_void,
                                                                           data:
                                                                               *mut u8)>,
                            opaque: *mut ::std::os::raw::c_void,
                            flags: ::std::os::raw::c_int) -> *mut AVBufferRef;
}
extern "C" {
    pub fn av_buffer_default_free(opaque: *mut ::std::os::raw::c_void,
                                  data: *mut u8);
}
extern "C" {
    pub fn av_buffer_ref(buf: *mut AVBufferRef) -> *mut AVBufferRef;
}
extern "C" {
    pub fn av_buffer_unref(buf: *mut *mut AVBufferRef);
}
extern "C" {
    pub fn av_buffer_is_writable(buf: *const AVBufferRef)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_buffer_get_opaque(buf: *const AVBufferRef)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_buffer_get_ref_count(buf: *const AVBufferRef)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_buffer_make_writable(buf: *mut *mut AVBufferRef)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_buffer_realloc(buf: *mut *mut AVBufferRef,
                             size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBufferPool([u8; 0]);
extern "C" {
    pub fn av_buffer_pool_init(size: ::std::os::raw::c_int,
                               alloc:
                                   ::std::option::Option<unsafe extern "C" fn(size:
                                                                                  ::std::os::raw::c_int)
                                                             ->
                                                                 *mut AVBufferRef>)
     -> *mut AVBufferPool;
}
extern "C" {
    pub fn av_buffer_pool_uninit(pool: *mut *mut AVBufferPool);
}
extern "C" {
    pub fn av_buffer_pool_get(pool: *mut AVBufferPool) -> *mut AVBufferRef;
}
extern "C" {
    pub fn av_get_cpu_flags() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_force_cpu_flags(flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_set_cpu_flags_mask(mask: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_parse_cpu_flags(s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_parse_cpu_caps(flags: *mut ::std::os::raw::c_uint,
                             s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_cpu_count() -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVMatrixEncoding {
    AV_MATRIX_ENCODING_NONE = 0,
    AV_MATRIX_ENCODING_DOLBY = 1,
    AV_MATRIX_ENCODING_DPLII = 2,
    AV_MATRIX_ENCODING_DPLIIX = 3,
    AV_MATRIX_ENCODING_DPLIIZ = 4,
    AV_MATRIX_ENCODING_DOLBYEX = 5,
    AV_MATRIX_ENCODING_DOLBYHEADPHONE = 6,
    AV_MATRIX_ENCODING_NB = 7,
}
extern "C" {
    pub fn av_get_channel_layout(name: *const ::std::os::raw::c_char) -> u64;
}
extern "C" {
    pub fn av_get_channel_layout_string(buf: *mut ::std::os::raw::c_char,
                                        buf_size: ::std::os::raw::c_int,
                                        nb_channels: ::std::os::raw::c_int,
                                        channel_layout: u64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBPrint([u8; 0]);
extern "C" {
    pub fn av_bprint_channel_layout(bp: *mut AVBPrint,
                                    nb_channels: ::std::os::raw::c_int,
                                    channel_layout: u64);
}
extern "C" {
    pub fn av_get_channel_layout_nb_channels(channel_layout: u64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_get_default_channel_layout(nb_channels: ::std::os::raw::c_int)
     -> i64;
}
extern "C" {
    pub fn av_get_channel_layout_channel_index(channel_layout: u64,
                                               channel: u64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_channel_layout_extract_channel(channel_layout: u64,
                                             index: ::std::os::raw::c_int)
     -> u64;
}
extern "C" {
    pub fn av_get_channel_name(channel: u64) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_get_channel_description(channel: u64)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_get_standard_channel_layout(index: ::std::os::raw::c_uint,
                                          layout: *mut u64,
                                          name:
                                              *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVDictionaryEntry {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVDictionaryEntry() {
    assert_eq!(::std::mem::size_of::<AVDictionaryEntry>() , 16usize);
    assert_eq!(::std::mem::align_of::<AVDictionaryEntry>() , 8usize);
}
impl Clone for AVDictionaryEntry {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDictionary([u8; 0]);
extern "C" {
    pub fn av_dict_get(m: *const AVDictionary,
                       key: *const ::std::os::raw::c_char,
                       prev: *const AVDictionaryEntry,
                       flags: ::std::os::raw::c_int)
     -> *mut AVDictionaryEntry;
}
extern "C" {
    pub fn av_dict_count(m: *const AVDictionary) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_dict_set(pm: *mut *mut AVDictionary,
                       key: *const ::std::os::raw::c_char,
                       value: *const ::std::os::raw::c_char,
                       flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_dict_set_int(pm: *mut *mut AVDictionary,
                           key: *const ::std::os::raw::c_char, value: i64,
                           flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_dict_parse_string(pm: *mut *mut AVDictionary,
                                str: *const ::std::os::raw::c_char,
                                key_val_sep: *const ::std::os::raw::c_char,
                                pairs_sep: *const ::std::os::raw::c_char,
                                flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_dict_copy(dst: *mut *mut AVDictionary, src: *const AVDictionary,
                        flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_dict_free(m: *mut *mut AVDictionary);
}
extern "C" {
    pub fn av_dict_get_string(m: *const AVDictionary,
                              buffer: *mut *mut ::std::os::raw::c_char,
                              key_val_sep: ::std::os::raw::c_char,
                              pairs_sep: ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVFrameSideDataType {
    AV_FRAME_DATA_PANSCAN = 0,
    AV_FRAME_DATA_A53_CC = 1,
    AV_FRAME_DATA_STEREO3D = 2,
    AV_FRAME_DATA_MATRIXENCODING = 3,
    AV_FRAME_DATA_DOWNMIX_INFO = 4,
    AV_FRAME_DATA_REPLAYGAIN = 5,
    AV_FRAME_DATA_DISPLAYMATRIX = 6,
    AV_FRAME_DATA_AFD = 7,
    AV_FRAME_DATA_MOTION_VECTORS = 8,
    AV_FRAME_DATA_SKIP_SAMPLES = 9,
    AV_FRAME_DATA_AUDIO_SERVICE_TYPE = 10,
    AV_FRAME_DATA_MASTERING_DISPLAY_METADATA = 11,
    AV_FRAME_DATA_GOP_TIMECODE = 12,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVActiveFormatDescription {
    AV_AFD_SAME = 8,
    AV_AFD_4_3 = 9,
    AV_AFD_16_9 = 10,
    AV_AFD_14_9 = 11,
    AV_AFD_4_3_SP_14_9 = 13,
    AV_AFD_16_9_SP_14_9 = 14,
    AV_AFD_SP_4_3 = 15,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrameSideData {
    pub type_: AVFrameSideDataType,
    pub data: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub metadata: *mut AVDictionary,
    pub buf: *mut AVBufferRef,
}
#[test]
fn bindgen_test_layout_AVFrameSideData() {
    assert_eq!(::std::mem::size_of::<AVFrameSideData>() , 40usize);
    assert_eq!(::std::mem::align_of::<AVFrameSideData>() , 8usize);
}
impl Clone for AVFrameSideData {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrame {
    pub data: [*mut u8; 8usize],
    pub linesize: [::std::os::raw::c_int; 8usize],
    pub extended_data: *mut *mut u8,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub nb_samples: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub key_frame: ::std::os::raw::c_int,
    pub pict_type: AVPictureType,
    pub sample_aspect_ratio: AVRational,
    pub pts: i64,
    pub pkt_pts: i64,
    pub pkt_dts: i64,
    pub coded_picture_number: ::std::os::raw::c_int,
    pub display_picture_number: ::std::os::raw::c_int,
    pub quality: ::std::os::raw::c_int,
    pub opaque: *mut ::std::os::raw::c_void,
    pub error: [u64; 8usize],
    pub repeat_pict: ::std::os::raw::c_int,
    pub interlaced_frame: ::std::os::raw::c_int,
    pub top_field_first: ::std::os::raw::c_int,
    pub palette_has_changed: ::std::os::raw::c_int,
    pub reordered_opaque: i64,
    pub sample_rate: ::std::os::raw::c_int,
    pub channel_layout: u64,
    pub buf: [*mut AVBufferRef; 8usize],
    pub extended_buf: *mut *mut AVBufferRef,
    pub nb_extended_buf: ::std::os::raw::c_int,
    pub side_data: *mut *mut AVFrameSideData,
    pub nb_side_data: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub color_range: AVColorRange,
    pub color_primaries: AVColorPrimaries,
    pub color_trc: AVColorTransferCharacteristic,
    pub colorspace: AVColorSpace,
    pub chroma_location: AVChromaLocation,
    pub best_effort_timestamp: i64,
    pub pkt_pos: i64,
    pub pkt_duration: i64,
    pub metadata: *mut AVDictionary,
    pub decode_error_flags: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub pkt_size: ::std::os::raw::c_int,
    pub qscale_table: *mut i8,
    pub qstride: ::std::os::raw::c_int,
    pub qscale_type: ::std::os::raw::c_int,
    pub qp_table_buf: *mut AVBufferRef,
}
impl Clone for AVFrame {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn av_frame_get_best_effort_timestamp(frame: *const AVFrame) -> i64;
}
extern "C" {
    pub fn av_frame_set_best_effort_timestamp(frame: *mut AVFrame, val: i64);
}
extern "C" {
    pub fn av_frame_get_pkt_duration(frame: *const AVFrame) -> i64;
}
extern "C" {
    pub fn av_frame_set_pkt_duration(frame: *mut AVFrame, val: i64);
}
extern "C" {
    pub fn av_frame_get_pkt_pos(frame: *const AVFrame) -> i64;
}
extern "C" {
    pub fn av_frame_set_pkt_pos(frame: *mut AVFrame, val: i64);
}
extern "C" {
    pub fn av_frame_get_channel_layout(frame: *const AVFrame) -> i64;
}
extern "C" {
    pub fn av_frame_set_channel_layout(frame: *mut AVFrame, val: i64);
}
extern "C" {
    pub fn av_frame_get_channels(frame: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_set_channels(frame: *mut AVFrame,
                                 val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_frame_get_sample_rate(frame: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_set_sample_rate(frame: *mut AVFrame,
                                    val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_frame_get_metadata(frame: *const AVFrame) -> *mut AVDictionary;
}
extern "C" {
    pub fn av_frame_set_metadata(frame: *mut AVFrame, val: *mut AVDictionary);
}
extern "C" {
    pub fn av_frame_get_decode_error_flags(frame: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_set_decode_error_flags(frame: *mut AVFrame,
                                           val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_frame_get_pkt_size(frame: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_set_pkt_size(frame: *mut AVFrame,
                                 val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn avpriv_frame_get_metadatap(frame: *mut AVFrame)
     -> *mut *mut AVDictionary;
}
extern "C" {
    pub fn av_frame_get_qp_table(f: *mut AVFrame,
                                 stride: *mut ::std::os::raw::c_int,
                                 type_: *mut ::std::os::raw::c_int)
     -> *mut i8;
}
extern "C" {
    pub fn av_frame_set_qp_table(f: *mut AVFrame, buf: *mut AVBufferRef,
                                 stride: ::std::os::raw::c_int,
                                 type_: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_get_colorspace(frame: *const AVFrame) -> AVColorSpace;
}
extern "C" {
    pub fn av_frame_set_colorspace(frame: *mut AVFrame, val: AVColorSpace);
}
extern "C" {
    pub fn av_frame_get_color_range(frame: *const AVFrame) -> AVColorRange;
}
extern "C" {
    pub fn av_frame_set_color_range(frame: *mut AVFrame, val: AVColorRange);
}
extern "C" {
    pub fn av_get_colorspace_name(val: AVColorSpace)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_frame_alloc() -> *mut AVFrame;
}
extern "C" {
    pub fn av_frame_free(frame: *mut *mut AVFrame);
}
extern "C" {
    pub fn av_frame_ref(dst: *mut AVFrame, src: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_clone(src: *const AVFrame) -> *mut AVFrame;
}
extern "C" {
    pub fn av_frame_unref(frame: *mut AVFrame);
}
extern "C" {
    pub fn av_frame_move_ref(dst: *mut AVFrame, src: *mut AVFrame);
}
extern "C" {
    pub fn av_frame_get_buffer(frame: *mut AVFrame,
                               align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_is_writable(frame: *mut AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_make_writable(frame: *mut AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_copy(dst: *mut AVFrame, src: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_copy_props(dst: *mut AVFrame, src: *const AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_frame_get_plane_buffer(frame: *mut AVFrame,
                                     plane: ::std::os::raw::c_int)
     -> *mut AVBufferRef;
}
extern "C" {
    pub fn av_frame_new_side_data(frame: *mut AVFrame,
                                  type_: AVFrameSideDataType,
                                  size: ::std::os::raw::c_int)
     -> *mut AVFrameSideData;
}
extern "C" {
    pub fn av_frame_get_side_data(frame: *const AVFrame,
                                  type_: AVFrameSideDataType)
     -> *mut AVFrameSideData;
}
extern "C" {
    pub fn av_frame_remove_side_data(frame: *mut AVFrame,
                                     type_: AVFrameSideDataType);
}
extern "C" {
    pub fn av_frame_side_data_name(type_: AVFrameSideDataType)
     -> *const ::std::os::raw::c_char;
}
pub const AVCodecID_AV_CODEC_ID_PCM_S16LE: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_AUDIO;
pub const AVCodecID_AV_CODEC_ID_VIMA: AVCodecID =
    AVCodecID::AV_CODEC_ID_ADPCM_VIMA;
pub const AVCodecID_AV_CODEC_ID_DVD_SUBTITLE: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_SUBTITLE;
pub const AVCodecID_AV_CODEC_ID_TTF: AVCodecID =
    AVCodecID::AV_CODEC_ID_FIRST_UNKNOWN;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVCodecID {
    AV_CODEC_ID_NONE = 0,
    AV_CODEC_ID_MPEG1VIDEO = 1,
    AV_CODEC_ID_MPEG2VIDEO = 2,
    AV_CODEC_ID_MPEG2VIDEO_XVMC = 3,
    AV_CODEC_ID_H261 = 4,
    AV_CODEC_ID_H263 = 5,
    AV_CODEC_ID_RV10 = 6,
    AV_CODEC_ID_RV20 = 7,
    AV_CODEC_ID_MJPEG = 8,
    AV_CODEC_ID_MJPEGB = 9,
    AV_CODEC_ID_LJPEG = 10,
    AV_CODEC_ID_SP5X = 11,
    AV_CODEC_ID_JPEGLS = 12,
    AV_CODEC_ID_MPEG4 = 13,
    AV_CODEC_ID_RAWVIDEO = 14,
    AV_CODEC_ID_MSMPEG4V1 = 15,
    AV_CODEC_ID_MSMPEG4V2 = 16,
    AV_CODEC_ID_MSMPEG4V3 = 17,
    AV_CODEC_ID_WMV1 = 18,
    AV_CODEC_ID_WMV2 = 19,
    AV_CODEC_ID_H263P = 20,
    AV_CODEC_ID_H263I = 21,
    AV_CODEC_ID_FLV1 = 22,
    AV_CODEC_ID_SVQ1 = 23,
    AV_CODEC_ID_SVQ3 = 24,
    AV_CODEC_ID_DVVIDEO = 25,
    AV_CODEC_ID_HUFFYUV = 26,
    AV_CODEC_ID_CYUV = 27,
    AV_CODEC_ID_H264 = 28,
    AV_CODEC_ID_INDEO3 = 29,
    AV_CODEC_ID_VP3 = 30,
    AV_CODEC_ID_THEORA = 31,
    AV_CODEC_ID_ASV1 = 32,
    AV_CODEC_ID_ASV2 = 33,
    AV_CODEC_ID_FFV1 = 34,
    AV_CODEC_ID_4XM = 35,
    AV_CODEC_ID_VCR1 = 36,
    AV_CODEC_ID_CLJR = 37,
    AV_CODEC_ID_MDEC = 38,
    AV_CODEC_ID_ROQ = 39,
    AV_CODEC_ID_INTERPLAY_VIDEO = 40,
    AV_CODEC_ID_XAN_WC3 = 41,
    AV_CODEC_ID_XAN_WC4 = 42,
    AV_CODEC_ID_RPZA = 43,
    AV_CODEC_ID_CINEPAK = 44,
    AV_CODEC_ID_WS_VQA = 45,
    AV_CODEC_ID_MSRLE = 46,
    AV_CODEC_ID_MSVIDEO1 = 47,
    AV_CODEC_ID_IDCIN = 48,
    AV_CODEC_ID_8BPS = 49,
    AV_CODEC_ID_SMC = 50,
    AV_CODEC_ID_FLIC = 51,
    AV_CODEC_ID_TRUEMOTION1 = 52,
    AV_CODEC_ID_VMDVIDEO = 53,
    AV_CODEC_ID_MSZH = 54,
    AV_CODEC_ID_ZLIB = 55,
    AV_CODEC_ID_QTRLE = 56,
    AV_CODEC_ID_TSCC = 57,
    AV_CODEC_ID_ULTI = 58,
    AV_CODEC_ID_QDRAW = 59,
    AV_CODEC_ID_VIXL = 60,
    AV_CODEC_ID_QPEG = 61,
    AV_CODEC_ID_PNG = 62,
    AV_CODEC_ID_PPM = 63,
    AV_CODEC_ID_PBM = 64,
    AV_CODEC_ID_PGM = 65,
    AV_CODEC_ID_PGMYUV = 66,
    AV_CODEC_ID_PAM = 67,
    AV_CODEC_ID_FFVHUFF = 68,
    AV_CODEC_ID_RV30 = 69,
    AV_CODEC_ID_RV40 = 70,
    AV_CODEC_ID_VC1 = 71,
    AV_CODEC_ID_WMV3 = 72,
    AV_CODEC_ID_LOCO = 73,
    AV_CODEC_ID_WNV1 = 74,
    AV_CODEC_ID_AASC = 75,
    AV_CODEC_ID_INDEO2 = 76,
    AV_CODEC_ID_FRAPS = 77,
    AV_CODEC_ID_TRUEMOTION2 = 78,
    AV_CODEC_ID_BMP = 79,
    AV_CODEC_ID_CSCD = 80,
    AV_CODEC_ID_MMVIDEO = 81,
    AV_CODEC_ID_ZMBV = 82,
    AV_CODEC_ID_AVS = 83,
    AV_CODEC_ID_SMACKVIDEO = 84,
    AV_CODEC_ID_NUV = 85,
    AV_CODEC_ID_KMVC = 86,
    AV_CODEC_ID_FLASHSV = 87,
    AV_CODEC_ID_CAVS = 88,
    AV_CODEC_ID_JPEG2000 = 89,
    AV_CODEC_ID_VMNC = 90,
    AV_CODEC_ID_VP5 = 91,
    AV_CODEC_ID_VP6 = 92,
    AV_CODEC_ID_VP6F = 93,
    AV_CODEC_ID_TARGA = 94,
    AV_CODEC_ID_DSICINVIDEO = 95,
    AV_CODEC_ID_TIERTEXSEQVIDEO = 96,
    AV_CODEC_ID_TIFF = 97,
    AV_CODEC_ID_GIF = 98,
    AV_CODEC_ID_DXA = 99,
    AV_CODEC_ID_DNXHD = 100,
    AV_CODEC_ID_THP = 101,
    AV_CODEC_ID_SGI = 102,
    AV_CODEC_ID_C93 = 103,
    AV_CODEC_ID_BETHSOFTVID = 104,
    AV_CODEC_ID_PTX = 105,
    AV_CODEC_ID_TXD = 106,
    AV_CODEC_ID_VP6A = 107,
    AV_CODEC_ID_AMV = 108,
    AV_CODEC_ID_VB = 109,
    AV_CODEC_ID_PCX = 110,
    AV_CODEC_ID_SUNRAST = 111,
    AV_CODEC_ID_INDEO4 = 112,
    AV_CODEC_ID_INDEO5 = 113,
    AV_CODEC_ID_MIMIC = 114,
    AV_CODEC_ID_RL2 = 115,
    AV_CODEC_ID_ESCAPE124 = 116,
    AV_CODEC_ID_DIRAC = 117,
    AV_CODEC_ID_BFI = 118,
    AV_CODEC_ID_CMV = 119,
    AV_CODEC_ID_MOTIONPIXELS = 120,
    AV_CODEC_ID_TGV = 121,
    AV_CODEC_ID_TGQ = 122,
    AV_CODEC_ID_TQI = 123,
    AV_CODEC_ID_AURA = 124,
    AV_CODEC_ID_AURA2 = 125,
    AV_CODEC_ID_V210X = 126,
    AV_CODEC_ID_TMV = 127,
    AV_CODEC_ID_V210 = 128,
    AV_CODEC_ID_DPX = 129,
    AV_CODEC_ID_MAD = 130,
    AV_CODEC_ID_FRWU = 131,
    AV_CODEC_ID_FLASHSV2 = 132,
    AV_CODEC_ID_CDGRAPHICS = 133,
    AV_CODEC_ID_R210 = 134,
    AV_CODEC_ID_ANM = 135,
    AV_CODEC_ID_BINKVIDEO = 136,
    AV_CODEC_ID_IFF_ILBM = 137,
    AV_CODEC_ID_KGV1 = 138,
    AV_CODEC_ID_YOP = 139,
    AV_CODEC_ID_VP8 = 140,
    AV_CODEC_ID_PICTOR = 141,
    AV_CODEC_ID_ANSI = 142,
    AV_CODEC_ID_A64_MULTI = 143,
    AV_CODEC_ID_A64_MULTI5 = 144,
    AV_CODEC_ID_R10K = 145,
    AV_CODEC_ID_MXPEG = 146,
    AV_CODEC_ID_LAGARITH = 147,
    AV_CODEC_ID_PRORES = 148,
    AV_CODEC_ID_JV = 149,
    AV_CODEC_ID_DFA = 150,
    AV_CODEC_ID_WMV3IMAGE = 151,
    AV_CODEC_ID_VC1IMAGE = 152,
    AV_CODEC_ID_UTVIDEO = 153,
    AV_CODEC_ID_BMV_VIDEO = 154,
    AV_CODEC_ID_VBLE = 155,
    AV_CODEC_ID_DXTORY = 156,
    AV_CODEC_ID_V410 = 157,
    AV_CODEC_ID_XWD = 158,
    AV_CODEC_ID_CDXL = 159,
    AV_CODEC_ID_XBM = 160,
    AV_CODEC_ID_ZEROCODEC = 161,
    AV_CODEC_ID_MSS1 = 162,
    AV_CODEC_ID_MSA1 = 163,
    AV_CODEC_ID_TSCC2 = 164,
    AV_CODEC_ID_MTS2 = 165,
    AV_CODEC_ID_CLLC = 166,
    AV_CODEC_ID_MSS2 = 167,
    AV_CODEC_ID_VP9 = 168,
    AV_CODEC_ID_AIC = 169,
    AV_CODEC_ID_ESCAPE130 = 170,
    AV_CODEC_ID_G2M = 171,
    AV_CODEC_ID_WEBP = 172,
    AV_CODEC_ID_HNM4_VIDEO = 173,
    AV_CODEC_ID_HEVC = 174,
    AV_CODEC_ID_FIC = 175,
    AV_CODEC_ID_ALIAS_PIX = 176,
    AV_CODEC_ID_BRENDER_PIX = 177,
    AV_CODEC_ID_PAF_VIDEO = 178,
    AV_CODEC_ID_EXR = 179,
    AV_CODEC_ID_VP7 = 180,
    AV_CODEC_ID_SANM = 181,
    AV_CODEC_ID_SGIRLE = 182,
    AV_CODEC_ID_MVC1 = 183,
    AV_CODEC_ID_MVC2 = 184,
    AV_CODEC_ID_HQX = 185,
    AV_CODEC_ID_TDSC = 186,
    AV_CODEC_ID_HQ_HQA = 187,
    AV_CODEC_ID_HAP = 188,
    AV_CODEC_ID_DDS = 189,
    AV_CODEC_ID_DXV = 190,
    AV_CODEC_ID_SCREENPRESSO = 191,
    AV_CODEC_ID_RSCC = 192,
    AV_CODEC_ID_Y41P = 32768,
    AV_CODEC_ID_AVRP = 32769,
    AV_CODEC_ID_012V = 32770,
    AV_CODEC_ID_AVUI = 32771,
    AV_CODEC_ID_AYUV = 32772,
    AV_CODEC_ID_TARGA_Y216 = 32773,
    AV_CODEC_ID_V308 = 32774,
    AV_CODEC_ID_V408 = 32775,
    AV_CODEC_ID_YUV4 = 32776,
    AV_CODEC_ID_AVRN = 32777,
    AV_CODEC_ID_CPIA = 32778,
    AV_CODEC_ID_XFACE = 32779,
    AV_CODEC_ID_SNOW = 32780,
    AV_CODEC_ID_SMVJPEG = 32781,
    AV_CODEC_ID_APNG = 32782,
    AV_CODEC_ID_DAALA = 32783,
    AV_CODEC_ID_CFHD = 32784,
    AV_CODEC_ID_FIRST_AUDIO = 65536,
    AV_CODEC_ID_PCM_S16BE = 65537,
    AV_CODEC_ID_PCM_U16LE = 65538,
    AV_CODEC_ID_PCM_U16BE = 65539,
    AV_CODEC_ID_PCM_S8 = 65540,
    AV_CODEC_ID_PCM_U8 = 65541,
    AV_CODEC_ID_PCM_MULAW = 65542,
    AV_CODEC_ID_PCM_ALAW = 65543,
    AV_CODEC_ID_PCM_S32LE = 65544,
    AV_CODEC_ID_PCM_S32BE = 65545,
    AV_CODEC_ID_PCM_U32LE = 65546,
    AV_CODEC_ID_PCM_U32BE = 65547,
    AV_CODEC_ID_PCM_S24LE = 65548,
    AV_CODEC_ID_PCM_S24BE = 65549,
    AV_CODEC_ID_PCM_U24LE = 65550,
    AV_CODEC_ID_PCM_U24BE = 65551,
    AV_CODEC_ID_PCM_S24DAUD = 65552,
    AV_CODEC_ID_PCM_ZORK = 65553,
    AV_CODEC_ID_PCM_S16LE_PLANAR = 65554,
    AV_CODEC_ID_PCM_DVD = 65555,
    AV_CODEC_ID_PCM_F32BE = 65556,
    AV_CODEC_ID_PCM_F32LE = 65557,
    AV_CODEC_ID_PCM_F64BE = 65558,
    AV_CODEC_ID_PCM_F64LE = 65559,
    AV_CODEC_ID_PCM_BLURAY = 65560,
    AV_CODEC_ID_PCM_LXF = 65561,
    AV_CODEC_ID_S302M = 65562,
    AV_CODEC_ID_PCM_S8_PLANAR = 65563,
    AV_CODEC_ID_PCM_S24LE_PLANAR = 65564,
    AV_CODEC_ID_PCM_S32LE_PLANAR = 65565,
    AV_CODEC_ID_PCM_S16BE_PLANAR = 65566,
    AV_CODEC_ID_ADPCM_IMA_QT = 69632,
    AV_CODEC_ID_ADPCM_IMA_WAV = 69633,
    AV_CODEC_ID_ADPCM_IMA_DK3 = 69634,
    AV_CODEC_ID_ADPCM_IMA_DK4 = 69635,
    AV_CODEC_ID_ADPCM_IMA_WS = 69636,
    AV_CODEC_ID_ADPCM_IMA_SMJPEG = 69637,
    AV_CODEC_ID_ADPCM_MS = 69638,
    AV_CODEC_ID_ADPCM_4XM = 69639,
    AV_CODEC_ID_ADPCM_XA = 69640,
    AV_CODEC_ID_ADPCM_ADX = 69641,
    AV_CODEC_ID_ADPCM_EA = 69642,
    AV_CODEC_ID_ADPCM_G726 = 69643,
    AV_CODEC_ID_ADPCM_CT = 69644,
    AV_CODEC_ID_ADPCM_SWF = 69645,
    AV_CODEC_ID_ADPCM_YAMAHA = 69646,
    AV_CODEC_ID_ADPCM_SBPRO_4 = 69647,
    AV_CODEC_ID_ADPCM_SBPRO_3 = 69648,
    AV_CODEC_ID_ADPCM_SBPRO_2 = 69649,
    AV_CODEC_ID_ADPCM_THP = 69650,
    AV_CODEC_ID_ADPCM_IMA_AMV = 69651,
    AV_CODEC_ID_ADPCM_EA_R1 = 69652,
    AV_CODEC_ID_ADPCM_EA_R3 = 69653,
    AV_CODEC_ID_ADPCM_EA_R2 = 69654,
    AV_CODEC_ID_ADPCM_IMA_EA_SEAD = 69655,
    AV_CODEC_ID_ADPCM_IMA_EA_EACS = 69656,
    AV_CODEC_ID_ADPCM_EA_XAS = 69657,
    AV_CODEC_ID_ADPCM_EA_MAXIS_XA = 69658,
    AV_CODEC_ID_ADPCM_IMA_ISS = 69659,
    AV_CODEC_ID_ADPCM_G722 = 69660,
    AV_CODEC_ID_ADPCM_IMA_APC = 69661,
    AV_CODEC_ID_ADPCM_VIMA = 69662,
    AV_CODEC_ID_ADPCM_AFC = 71680,
    AV_CODEC_ID_ADPCM_IMA_OKI = 71681,
    AV_CODEC_ID_ADPCM_DTK = 71682,
    AV_CODEC_ID_ADPCM_IMA_RAD = 71683,
    AV_CODEC_ID_ADPCM_G726LE = 71684,
    AV_CODEC_ID_ADPCM_THP_LE = 71685,
    AV_CODEC_ID_ADPCM_PSX = 71686,
    AV_CODEC_ID_ADPCM_AICA = 71687,
    AV_CODEC_ID_AMR_NB = 73728,
    AV_CODEC_ID_AMR_WB = 73729,
    AV_CODEC_ID_RA_144 = 77824,
    AV_CODEC_ID_RA_288 = 77825,
    AV_CODEC_ID_ROQ_DPCM = 81920,
    AV_CODEC_ID_INTERPLAY_DPCM = 81921,
    AV_CODEC_ID_XAN_DPCM = 81922,
    AV_CODEC_ID_SOL_DPCM = 81923,
    AV_CODEC_ID_SDX2_DPCM = 83968,
    AV_CODEC_ID_MP2 = 86016,
    AV_CODEC_ID_MP3 = 86017,
    AV_CODEC_ID_AAC = 86018,
    AV_CODEC_ID_AC3 = 86019,
    AV_CODEC_ID_DTS = 86020,
    AV_CODEC_ID_VORBIS = 86021,
    AV_CODEC_ID_DVAUDIO = 86022,
    AV_CODEC_ID_WMAV1 = 86023,
    AV_CODEC_ID_WMAV2 = 86024,
    AV_CODEC_ID_MACE3 = 86025,
    AV_CODEC_ID_MACE6 = 86026,
    AV_CODEC_ID_VMDAUDIO = 86027,
    AV_CODEC_ID_FLAC = 86028,
    AV_CODEC_ID_MP3ADU = 86029,
    AV_CODEC_ID_MP3ON4 = 86030,
    AV_CODEC_ID_SHORTEN = 86031,
    AV_CODEC_ID_ALAC = 86032,
    AV_CODEC_ID_WESTWOOD_SND1 = 86033,
    AV_CODEC_ID_GSM = 86034,
    AV_CODEC_ID_QDM2 = 86035,
    AV_CODEC_ID_COOK = 86036,
    AV_CODEC_ID_TRUESPEECH = 86037,
    AV_CODEC_ID_TTA = 86038,
    AV_CODEC_ID_SMACKAUDIO = 86039,
    AV_CODEC_ID_QCELP = 86040,
    AV_CODEC_ID_WAVPACK = 86041,
    AV_CODEC_ID_DSICINAUDIO = 86042,
    AV_CODEC_ID_IMC = 86043,
    AV_CODEC_ID_MUSEPACK7 = 86044,
    AV_CODEC_ID_MLP = 86045,
    AV_CODEC_ID_GSM_MS = 86046,
    AV_CODEC_ID_ATRAC3 = 86047,
    AV_CODEC_ID_VOXWARE = 86048,
    AV_CODEC_ID_APE = 86049,
    AV_CODEC_ID_NELLYMOSER = 86050,
    AV_CODEC_ID_MUSEPACK8 = 86051,
    AV_CODEC_ID_SPEEX = 86052,
    AV_CODEC_ID_WMAVOICE = 86053,
    AV_CODEC_ID_WMAPRO = 86054,
    AV_CODEC_ID_WMALOSSLESS = 86055,
    AV_CODEC_ID_ATRAC3P = 86056,
    AV_CODEC_ID_EAC3 = 86057,
    AV_CODEC_ID_SIPR = 86058,
    AV_CODEC_ID_MP1 = 86059,
    AV_CODEC_ID_TWINVQ = 86060,
    AV_CODEC_ID_TRUEHD = 86061,
    AV_CODEC_ID_MP4ALS = 86062,
    AV_CODEC_ID_ATRAC1 = 86063,
    AV_CODEC_ID_BINKAUDIO_RDFT = 86064,
    AV_CODEC_ID_BINKAUDIO_DCT = 86065,
    AV_CODEC_ID_AAC_LATM = 86066,
    AV_CODEC_ID_QDMC = 86067,
    AV_CODEC_ID_CELT = 86068,
    AV_CODEC_ID_G723_1 = 86069,
    AV_CODEC_ID_G729 = 86070,
    AV_CODEC_ID_8SVX_EXP = 86071,
    AV_CODEC_ID_8SVX_FIB = 86072,
    AV_CODEC_ID_BMV_AUDIO = 86073,
    AV_CODEC_ID_RALF = 86074,
    AV_CODEC_ID_IAC = 86075,
    AV_CODEC_ID_ILBC = 86076,
    AV_CODEC_ID_OPUS = 86077,
    AV_CODEC_ID_COMFORT_NOISE = 86078,
    AV_CODEC_ID_TAK = 86079,
    AV_CODEC_ID_METASOUND = 86080,
    AV_CODEC_ID_PAF_AUDIO = 86081,
    AV_CODEC_ID_ON2AVC = 86082,
    AV_CODEC_ID_DSS_SP = 86083,
    AV_CODEC_ID_FFWAVESYNTH = 88064,
    AV_CODEC_ID_SONIC = 88065,
    AV_CODEC_ID_SONIC_LS = 88066,
    AV_CODEC_ID_EVRC = 88067,
    AV_CODEC_ID_SMV = 88068,
    AV_CODEC_ID_DSD_LSBF = 88069,
    AV_CODEC_ID_DSD_MSBF = 88070,
    AV_CODEC_ID_DSD_LSBF_PLANAR = 88071,
    AV_CODEC_ID_DSD_MSBF_PLANAR = 88072,
    AV_CODEC_ID_4GV = 88073,
    AV_CODEC_ID_INTERPLAY_ACM = 88074,
    AV_CODEC_ID_XMA1 = 88075,
    AV_CODEC_ID_XMA2 = 88076,
    AV_CODEC_ID_FIRST_SUBTITLE = 94208,
    AV_CODEC_ID_DVB_SUBTITLE = 94209,
    AV_CODEC_ID_TEXT = 94210,
    AV_CODEC_ID_XSUB = 94211,
    AV_CODEC_ID_SSA = 94212,
    AV_CODEC_ID_MOV_TEXT = 94213,
    AV_CODEC_ID_HDMV_PGS_SUBTITLE = 94214,
    AV_CODEC_ID_DVB_TELETEXT = 94215,
    AV_CODEC_ID_SRT = 94216,
    AV_CODEC_ID_MICRODVD = 96256,
    AV_CODEC_ID_EIA_608 = 96257,
    AV_CODEC_ID_JACOSUB = 96258,
    AV_CODEC_ID_SAMI = 96259,
    AV_CODEC_ID_REALTEXT = 96260,
    AV_CODEC_ID_STL = 96261,
    AV_CODEC_ID_SUBVIEWER1 = 96262,
    AV_CODEC_ID_SUBVIEWER = 96263,
    AV_CODEC_ID_SUBRIP = 96264,
    AV_CODEC_ID_WEBVTT = 96265,
    AV_CODEC_ID_MPL2 = 96266,
    AV_CODEC_ID_VPLAYER = 96267,
    AV_CODEC_ID_PJS = 96268,
    AV_CODEC_ID_ASS = 96269,
    AV_CODEC_ID_HDMV_TEXT_SUBTITLE = 96270,
    AV_CODEC_ID_FIRST_UNKNOWN = 98304,
    AV_CODEC_ID_BINTEXT = 100352,
    AV_CODEC_ID_XBIN = 100353,
    AV_CODEC_ID_IDF = 100354,
    AV_CODEC_ID_OTF = 100355,
    AV_CODEC_ID_SMPTE_KLV = 100356,
    AV_CODEC_ID_DVD_NAV = 100357,
    AV_CODEC_ID_TIMED_ID3 = 100358,
    AV_CODEC_ID_BIN_DATA = 100359,
    AV_CODEC_ID_PROBE = 102400,
    AV_CODEC_ID_MPEG2TS = 131072,
    AV_CODEC_ID_MPEG4SYSTEMS = 131073,
    AV_CODEC_ID_FFMETADATA = 135168,
    AV_CODEC_ID_WRAPPED_AVFRAME = 135169,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecDescriptor {
    pub id: AVCodecID,
    pub type_: AVMediaType,
    pub name: *const ::std::os::raw::c_char,
    pub long_name: *const ::std::os::raw::c_char,
    pub props: ::std::os::raw::c_int,
    pub mime_types: *const *const ::std::os::raw::c_char,
    pub profiles: *const AVCodecDescriptor_AVProfile,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecDescriptor_AVProfile {
    pub profile: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVCodecDescriptor_AVProfile() {
    assert_eq!(::std::mem::size_of::<AVCodecDescriptor_AVProfile>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<AVCodecDescriptor_AVProfile>() ,
               8usize);
}
impl Clone for AVCodecDescriptor_AVProfile {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_AVCodecDescriptor() {
    assert_eq!(::std::mem::size_of::<AVCodecDescriptor>() , 48usize);
    assert_eq!(::std::mem::align_of::<AVCodecDescriptor>() , 8usize);
}
impl Clone for AVCodecDescriptor {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Motion_Est_ID {
    ME_ZERO = 1,
    ME_FULL = 2,
    ME_LOG = 3,
    ME_PHODS = 4,
    ME_EPZS = 5,
    ME_X1 = 6,
    ME_HEX = 7,
    ME_UMH = 8,
    ME_TESA = 9,
    ME_ITER = 50,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVDiscard {
    AVDISCARD_NONE = -16,
    AVDISCARD_DEFAULT = 0,
    AVDISCARD_NONREF = 8,
    AVDISCARD_BIDIR = 16,
    AVDISCARD_NONINTRA = 24,
    AVDISCARD_NONKEY = 32,
    AVDISCARD_ALL = 48,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVAudioServiceType {
    AV_AUDIO_SERVICE_TYPE_MAIN = 0,
    AV_AUDIO_SERVICE_TYPE_EFFECTS = 1,
    AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2,
    AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED = 3,
    AV_AUDIO_SERVICE_TYPE_DIALOGUE = 4,
    AV_AUDIO_SERVICE_TYPE_COMMENTARY = 5,
    AV_AUDIO_SERVICE_TYPE_EMERGENCY = 6,
    AV_AUDIO_SERVICE_TYPE_VOICE_OVER = 7,
    AV_AUDIO_SERVICE_TYPE_KARAOKE = 8,
    AV_AUDIO_SERVICE_TYPE_NB = 9,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RcOverride {
    pub start_frame: ::std::os::raw::c_int,
    pub end_frame: ::std::os::raw::c_int,
    pub qscale: ::std::os::raw::c_int,
    pub quality_factor: f32,
}
#[test]
fn bindgen_test_layout_RcOverride() {
    assert_eq!(::std::mem::size_of::<RcOverride>() , 16usize);
    assert_eq!(::std::mem::align_of::<RcOverride>() , 4usize);
}
impl Clone for RcOverride {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVPanScan {
    pub id: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub position: [[i16; 2usize]; 3usize],
}
#[test]
fn bindgen_test_layout_AVPanScan() {
    assert_eq!(::std::mem::size_of::<AVPanScan>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVPanScan>() , 4usize);
}
impl Clone for AVPanScan {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCPBProperties {
    pub max_bitrate: ::std::os::raw::c_int,
    pub min_bitrate: ::std::os::raw::c_int,
    pub avg_bitrate: ::std::os::raw::c_int,
    pub buffer_size: ::std::os::raw::c_int,
    pub vbv_delay: u64,
}
#[test]
fn bindgen_test_layout_AVCPBProperties() {
    assert_eq!(::std::mem::size_of::<AVCPBProperties>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVCPBProperties>() , 8usize);
}
impl Clone for AVCPBProperties {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVPacketSideDataType {
    AV_PKT_DATA_PALETTE = 0,
    AV_PKT_DATA_NEW_EXTRADATA = 1,
    AV_PKT_DATA_PARAM_CHANGE = 2,
    AV_PKT_DATA_H263_MB_INFO = 3,
    AV_PKT_DATA_REPLAYGAIN = 4,
    AV_PKT_DATA_DISPLAYMATRIX = 5,
    AV_PKT_DATA_STEREO3D = 6,
    AV_PKT_DATA_AUDIO_SERVICE_TYPE = 7,
    AV_PKT_DATA_QUALITY_STATS = 8,
    AV_PKT_DATA_FALLBACK_TRACK = 9,
    AV_PKT_DATA_CPB_PROPERTIES = 10,
    AV_PKT_DATA_SKIP_SAMPLES = 70,
    AV_PKT_DATA_JP_DUALMONO = 71,
    AV_PKT_DATA_STRINGS_METADATA = 72,
    AV_PKT_DATA_SUBTITLE_POSITION = 73,
    AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL = 74,
    AV_PKT_DATA_WEBVTT_IDENTIFIER = 75,
    AV_PKT_DATA_WEBVTT_SETTINGS = 76,
    AV_PKT_DATA_METADATA_UPDATE = 77,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVPacketSideData {
    pub data: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub type_: AVPacketSideDataType,
}
#[test]
fn bindgen_test_layout_AVPacketSideData() {
    assert_eq!(::std::mem::size_of::<AVPacketSideData>() , 16usize);
    assert_eq!(::std::mem::align_of::<AVPacketSideData>() , 8usize);
}
impl Clone for AVPacketSideData {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVPacket {
    pub buf: *mut AVBufferRef,
    pub pts: i64,
    pub dts: i64,
    pub data: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub stream_index: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub side_data: *mut AVPacketSideData,
    pub side_data_elems: ::std::os::raw::c_int,
    pub duration: i64,
    pub pos: i64,
    pub convergence_duration: i64,
}
impl Clone for AVPacket {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVSideDataParamChangeFlags {
    AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT = 1,
    AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 2,
    AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE = 4,
    AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecInternal([u8; 0]);
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVFieldOrder {
    AV_FIELD_UNKNOWN = 0,
    AV_FIELD_PROGRESSIVE = 1,
    AV_FIELD_TT = 2,
    AV_FIELD_BB = 3,
    AV_FIELD_TB = 4,
    AV_FIELD_BT = 5,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecContext {
    pub av_class: *const AVClass,
    pub log_level_offset: ::std::os::raw::c_int,
    pub codec_type: AVMediaType,
    pub codec: *const AVCodecContext_AVCodec,
    pub codec_name: [::std::os::raw::c_char; 32usize],
    pub codec_id: AVCodecID,
    pub codec_tag: ::std::os::raw::c_uint,
    pub stream_codec_tag: ::std::os::raw::c_uint,
    pub priv_data: *mut ::std::os::raw::c_void,
    pub internal: *mut AVCodecInternal,
    pub opaque: *mut ::std::os::raw::c_void,
    pub bit_rate: i64,
    pub bit_rate_tolerance: ::std::os::raw::c_int,
    pub global_quality: ::std::os::raw::c_int,
    pub compression_level: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub flags2: ::std::os::raw::c_int,
    pub extradata: *mut u8,
    pub extradata_size: ::std::os::raw::c_int,
    pub time_base: AVRational,
    pub ticks_per_frame: ::std::os::raw::c_int,
    pub delay: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub coded_width: ::std::os::raw::c_int,
    pub coded_height: ::std::os::raw::c_int,
    pub gop_size: ::std::os::raw::c_int,
    pub pix_fmt: AVPixelFormat,
    pub me_method: ::std::os::raw::c_int,
    pub draw_horiz_band: ::std::option::Option<unsafe extern "C" fn(s:
                                                                        *mut AVCodecContext,
                                                                    src:
                                                                        *const AVFrame,
                                                                    offset:
                                                                        *mut ::std::os::raw::c_int,
                                                                    y:
                                                                        ::std::os::raw::c_int,
                                                                    type_:
                                                                        ::std::os::raw::c_int,
                                                                    height:
                                                                        ::std::os::raw::c_int)>,
    pub get_format: ::std::option::Option<unsafe extern "C" fn(s:
                                                                   *mut AVCodecContext,
                                                               fmt:
                                                                   *const AVPixelFormat)
                                              -> AVPixelFormat>,
    pub max_b_frames: ::std::os::raw::c_int,
    pub b_quant_factor: f32,
    pub rc_strategy: ::std::os::raw::c_int,
    pub b_frame_strategy: ::std::os::raw::c_int,
    pub b_quant_offset: f32,
    pub has_b_frames: ::std::os::raw::c_int,
    pub mpeg_quant: ::std::os::raw::c_int,
    pub i_quant_factor: f32,
    pub i_quant_offset: f32,
    pub lumi_masking: f32,
    pub temporal_cplx_masking: f32,
    pub spatial_cplx_masking: f32,
    pub p_masking: f32,
    pub dark_masking: f32,
    pub slice_count: ::std::os::raw::c_int,
    pub prediction_method: ::std::os::raw::c_int,
    pub slice_offset: *mut ::std::os::raw::c_int,
    pub sample_aspect_ratio: AVRational,
    pub me_cmp: ::std::os::raw::c_int,
    pub me_sub_cmp: ::std::os::raw::c_int,
    pub mb_cmp: ::std::os::raw::c_int,
    pub ildct_cmp: ::std::os::raw::c_int,
    pub dia_size: ::std::os::raw::c_int,
    pub last_predictor_count: ::std::os::raw::c_int,
    pub pre_me: ::std::os::raw::c_int,
    pub me_pre_cmp: ::std::os::raw::c_int,
    pub pre_dia_size: ::std::os::raw::c_int,
    pub me_subpel_quality: ::std::os::raw::c_int,
    pub dtg_active_format: ::std::os::raw::c_int,
    pub me_range: ::std::os::raw::c_int,
    pub intra_quant_bias: ::std::os::raw::c_int,
    pub inter_quant_bias: ::std::os::raw::c_int,
    pub slice_flags: ::std::os::raw::c_int,
    pub xvmc_acceleration: ::std::os::raw::c_int,
    pub mb_decision: ::std::os::raw::c_int,
    pub intra_matrix: *mut u16,
    pub inter_matrix: *mut u16,
    pub scenechange_threshold: ::std::os::raw::c_int,
    pub noise_reduction: ::std::os::raw::c_int,
    pub me_threshold: ::std::os::raw::c_int,
    pub mb_threshold: ::std::os::raw::c_int,
    pub intra_dc_precision: ::std::os::raw::c_int,
    pub skip_top: ::std::os::raw::c_int,
    pub skip_bottom: ::std::os::raw::c_int,
    pub border_masking: f32,
    pub mb_lmin: ::std::os::raw::c_int,
    pub mb_lmax: ::std::os::raw::c_int,
    pub me_penalty_compensation: ::std::os::raw::c_int,
    pub bidir_refine: ::std::os::raw::c_int,
    pub brd_scale: ::std::os::raw::c_int,
    pub keyint_min: ::std::os::raw::c_int,
    pub refs: ::std::os::raw::c_int,
    pub chromaoffset: ::std::os::raw::c_int,
    pub scenechange_factor: ::std::os::raw::c_int,
    pub mv0_threshold: ::std::os::raw::c_int,
    pub b_sensitivity: ::std::os::raw::c_int,
    pub color_primaries: AVColorPrimaries,
    pub color_trc: AVColorTransferCharacteristic,
    pub colorspace: AVColorSpace,
    pub color_range: AVColorRange,
    pub chroma_sample_location: AVChromaLocation,
    pub slices: ::std::os::raw::c_int,
    pub field_order: AVFieldOrder,
    pub sample_rate: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub sample_fmt: AVSampleFormat,
    pub frame_size: ::std::os::raw::c_int,
    pub frame_number: ::std::os::raw::c_int,
    pub block_align: ::std::os::raw::c_int,
    pub cutoff: ::std::os::raw::c_int,
    pub channel_layout: u64,
    pub request_channel_layout: u64,
    pub audio_service_type: AVAudioServiceType,
    pub request_sample_fmt: AVSampleFormat,
    pub get_buffer2: ::std::option::Option<unsafe extern "C" fn(s:
                                                                    *mut AVCodecContext,
                                                                frame:
                                                                    *mut AVFrame,
                                                                flags:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    pub refcounted_frames: ::std::os::raw::c_int,
    pub qcompress: f32,
    pub qblur: f32,
    pub qmin: ::std::os::raw::c_int,
    pub qmax: ::std::os::raw::c_int,
    pub max_qdiff: ::std::os::raw::c_int,
    pub rc_qsquish: f32,
    pub rc_qmod_amp: f32,
    pub rc_qmod_freq: ::std::os::raw::c_int,
    pub rc_buffer_size: ::std::os::raw::c_int,
    pub rc_override_count: ::std::os::raw::c_int,
    pub rc_override: *mut RcOverride,
    pub rc_eq: *const ::std::os::raw::c_char,
    pub rc_max_rate: i64,
    pub rc_min_rate: i64,
    pub rc_buffer_aggressivity: f32,
    pub rc_initial_cplx: f32,
    pub rc_max_available_vbv_use: f32,
    pub rc_min_vbv_overflow_use: f32,
    pub rc_initial_buffer_occupancy: ::std::os::raw::c_int,
    pub coder_type: ::std::os::raw::c_int,
    pub context_model: ::std::os::raw::c_int,
    pub lmin: ::std::os::raw::c_int,
    pub lmax: ::std::os::raw::c_int,
    pub frame_skip_threshold: ::std::os::raw::c_int,
    pub frame_skip_factor: ::std::os::raw::c_int,
    pub frame_skip_exp: ::std::os::raw::c_int,
    pub frame_skip_cmp: ::std::os::raw::c_int,
    pub trellis: ::std::os::raw::c_int,
    pub min_prediction_order: ::std::os::raw::c_int,
    pub max_prediction_order: ::std::os::raw::c_int,
    pub timecode_frame_start: i64,
    pub rtp_callback: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                     *mut AVCodecContext,
                                                                 data:
                                                                     *mut ::std::os::raw::c_void,
                                                                 size:
                                                                     ::std::os::raw::c_int,
                                                                 mb_nb:
                                                                     ::std::os::raw::c_int)>,
    pub rtp_payload_size: ::std::os::raw::c_int,
    pub mv_bits: ::std::os::raw::c_int,
    pub header_bits: ::std::os::raw::c_int,
    pub i_tex_bits: ::std::os::raw::c_int,
    pub p_tex_bits: ::std::os::raw::c_int,
    pub i_count: ::std::os::raw::c_int,
    pub p_count: ::std::os::raw::c_int,
    pub skip_count: ::std::os::raw::c_int,
    pub misc_bits: ::std::os::raw::c_int,
    pub frame_bits: ::std::os::raw::c_int,
    pub stats_out: *mut ::std::os::raw::c_char,
    pub stats_in: *mut ::std::os::raw::c_char,
    pub workaround_bugs: ::std::os::raw::c_int,
    pub strict_std_compliance: ::std::os::raw::c_int,
    pub error_concealment: ::std::os::raw::c_int,
    pub debug: ::std::os::raw::c_int,
    pub debug_mv: ::std::os::raw::c_int,
    pub err_recognition: ::std::os::raw::c_int,
    pub reordered_opaque: i64,
    pub hwaccel: *mut AVCodecContext_AVHWAccel,
    pub hwaccel_context: *mut ::std::os::raw::c_void,
    pub error: [u64; 8usize],
    pub dct_algo: ::std::os::raw::c_int,
    pub idct_algo: ::std::os::raw::c_int,
    pub bits_per_coded_sample: ::std::os::raw::c_int,
    pub bits_per_raw_sample: ::std::os::raw::c_int,
    pub lowres: ::std::os::raw::c_int,
    pub coded_frame: *mut AVFrame,
    pub thread_count: ::std::os::raw::c_int,
    pub thread_type: ::std::os::raw::c_int,
    pub active_thread_type: ::std::os::raw::c_int,
    pub thread_safe_callbacks: ::std::os::raw::c_int,
    pub execute: ::std::option::Option<unsafe extern "C" fn(c:
                                                                *mut AVCodecContext,
                                                            func:
                                                                ::std::option::Option<unsafe extern "C" fn(c2:
                                                                                                               *mut AVCodecContext,
                                                                                                           arg:
                                                                                                               *mut ::std::os::raw::c_void)
                                                                                          ->
                                                                                              ::std::os::raw::c_int>,
                                                            arg2:
                                                                *mut ::std::os::raw::c_void,
                                                            ret:
                                                                *mut ::std::os::raw::c_int,
                                                            count:
                                                                ::std::os::raw::c_int,
                                                            size:
                                                                ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_int>,
    pub execute2: ::std::option::Option<unsafe extern "C" fn(c:
                                                                 *mut AVCodecContext,
                                                             func:
                                                                 ::std::option::Option<unsafe extern "C" fn(c2:
                                                                                                                *mut AVCodecContext,
                                                                                                            arg:
                                                                                                                *mut ::std::os::raw::c_void,
                                                                                                            jobnr:
                                                                                                                ::std::os::raw::c_int,
                                                                                                            threadnr:
                                                                                                                ::std::os::raw::c_int)
                                                                                           ->
                                                                                               ::std::os::raw::c_int>,
                                                             arg2:
                                                                 *mut ::std::os::raw::c_void,
                                                             ret:
                                                                 *mut ::std::os::raw::c_int,
                                                             count:
                                                                 ::std::os::raw::c_int)
                                            -> ::std::os::raw::c_int>,
    pub nsse_weight: ::std::os::raw::c_int,
    pub profile: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub skip_loop_filter: AVDiscard,
    pub skip_idct: AVDiscard,
    pub skip_frame: AVDiscard,
    pub subtitle_header: *mut u8,
    pub subtitle_header_size: ::std::os::raw::c_int,
    pub error_rate: ::std::os::raw::c_int,
    pub vbv_delay: u64,
    pub side_data_only_packets: ::std::os::raw::c_int,
    pub initial_padding: ::std::os::raw::c_int,
    pub framerate: AVRational,
    pub sw_pix_fmt: AVPixelFormat,
    pub pkt_timebase: AVRational,
    pub codec_descriptor: *const AVCodecDescriptor,
    pub pts_correction_num_faulty_pts: i64,
    pub pts_correction_num_faulty_dts: i64,
    pub pts_correction_last_pts: i64,
    pub pts_correction_last_dts: i64,
    pub sub_charenc: *mut ::std::os::raw::c_char,
    pub sub_charenc_mode: ::std::os::raw::c_int,
    pub skip_alpha: ::std::os::raw::c_int,
    pub seek_preroll: ::std::os::raw::c_int,
    pub chroma_intra_matrix: *mut u16,
    pub dump_separator: *mut u8,
    pub codec_whitelist: *mut ::std::os::raw::c_char,
    pub properties: ::std::os::raw::c_uint,
    pub coded_side_data: *mut AVPacketSideData,
    pub nb_coded_side_data: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecContext_AVCodec {
    pub name: *const ::std::os::raw::c_char,
    pub long_name: *const ::std::os::raw::c_char,
    pub type_: AVMediaType,
    pub id: AVCodecID,
    pub capabilities: ::std::os::raw::c_int,
    pub supported_framerates: *const AVRational,
    pub pix_fmts: *const AVPixelFormat,
    pub supported_samplerates: *const ::std::os::raw::c_int,
    pub sample_fmts: *const AVSampleFormat,
    pub channel_layouts: *const u64,
    pub max_lowres: u8,
    pub priv_class: *const AVClass,
    pub profiles: *const AVProfile,
    pub priv_data_size: ::std::os::raw::c_int,
    pub next: *mut AVCodecContext_AVCodec,
    pub init_thread_copy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut AVCodecContext)
                                                    -> ::std::os::raw::c_int>,
    pub update_thread_context: ::std::option::Option<unsafe extern "C" fn(dst:
                                                                              *mut AVCodecContext,
                                                                          src:
                                                                              *const AVCodecContext)
                                                         ->
                                                             ::std::os::raw::c_int>,
    pub defaults: *const AVCodecDefault,
    pub init_static_data: ::std::option::Option<unsafe extern "C" fn(codec:
                                                                         *mut AVCodecContext_AVCodec)>,
    pub init: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut AVCodecContext)
                                        -> ::std::os::raw::c_int>,
    pub encode_sub: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut AVCodecContext,
                                                               buf: *mut u8,
                                                               buf_size:
                                                                   ::std::os::raw::c_int,
                                                               sub:
                                                                   *const AVSubtitle)
                                              -> ::std::os::raw::c_int>,
    pub encode2: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                *mut AVCodecContext,
                                                            avpkt:
                                                                *mut AVPacket,
                                                            frame:
                                                                *const AVFrame,
                                                            got_packet_ptr:
                                                                *mut ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_int>,
    pub decode: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut AVCodecContext,
                                                           outdata:
                                                               *mut ::std::os::raw::c_void,
                                                           outdata_size:
                                                               *mut ::std::os::raw::c_int,
                                                           avpkt:
                                                               *mut AVPacket)
                                          -> ::std::os::raw::c_int>,
    pub close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut AVCodecContext)
                                         -> ::std::os::raw::c_int>,
    pub flush: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut AVCodecContext)>,
    pub caps_internal: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVCodecContext_AVCodec() {
    assert_eq!(::std::mem::size_of::<AVCodecContext_AVCodec>() , 200usize);
    assert_eq!(::std::mem::align_of::<AVCodecContext_AVCodec>() , 8usize);
}
impl Clone for AVCodecContext_AVCodec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecContext_AVHWAccel {
    pub name: *const ::std::os::raw::c_char,
    pub type_: AVMediaType,
    pub id: AVCodecID,
    pub pix_fmt: AVPixelFormat,
    pub capabilities: ::std::os::raw::c_int,
    pub next: *mut AVCodecContext_AVHWAccel,
    pub alloc_frame: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                    *mut AVCodecContext,
                                                                frame:
                                                                    *mut AVFrame)
                                               -> ::std::os::raw::c_int>,
    pub start_frame: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                    *mut AVCodecContext,
                                                                buf:
                                                                    *const u8,
                                                                buf_size: u32)
                                               -> ::std::os::raw::c_int>,
    pub decode_slice: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                     *mut AVCodecContext,
                                                                 buf:
                                                                     *const u8,
                                                                 buf_size:
                                                                     u32)
                                                -> ::std::os::raw::c_int>,
    pub end_frame: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                                  *mut AVCodecContext)
                                             -> ::std::os::raw::c_int>,
    pub frame_priv_data_size: ::std::os::raw::c_int,
    pub decode_mb: ::std::option::Option<unsafe extern "C" fn(s:
                                                                  *mut MpegEncContext)>,
    pub init: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                             *mut AVCodecContext)
                                        -> ::std::os::raw::c_int>,
    pub uninit: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                               *mut AVCodecContext)
                                          -> ::std::os::raw::c_int>,
    pub priv_data_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVCodecContext_AVHWAccel() {
    assert_eq!(::std::mem::size_of::<AVCodecContext_AVHWAccel>() , 104usize);
    assert_eq!(::std::mem::align_of::<AVCodecContext_AVHWAccel>() , 8usize);
}
impl Clone for AVCodecContext_AVHWAccel {
    fn clone(&self) -> Self { *self }
}
impl Clone for AVCodecContext {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn av_codec_get_pkt_timebase(avctx: *const AVCodecContext)
     -> AVRational;
}
extern "C" {
    pub fn av_codec_set_pkt_timebase(avctx: *mut AVCodecContext,
                                     val: AVRational);
}
extern "C" {
    pub fn av_codec_get_codec_descriptor(avctx: *const AVCodecContext)
     -> *const AVCodecDescriptor;
}
extern "C" {
    pub fn av_codec_set_codec_descriptor(avctx: *mut AVCodecContext,
                                         desc: *const AVCodecDescriptor);
}
extern "C" {
    pub fn av_codec_get_codec_properties(avctx: *const AVCodecContext)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn av_codec_get_lowres(avctx: *const AVCodecContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_codec_set_lowres(avctx: *mut AVCodecContext,
                               val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_codec_get_seek_preroll(avctx: *const AVCodecContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_codec_set_seek_preroll(avctx: *mut AVCodecContext,
                                     val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_codec_get_chroma_intra_matrix(avctx: *const AVCodecContext)
     -> *mut u16;
}
extern "C" {
    pub fn av_codec_set_chroma_intra_matrix(avctx: *mut AVCodecContext,
                                            val: *mut u16);
}
pub type AVProfile = AVCodecDescriptor_AVProfile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecDefault([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVSubtitle {
    pub format: u16,
    pub start_display_time: u32,
    pub end_display_time: u32,
    pub num_rects: ::std::os::raw::c_uint,
    pub rects: *mut *mut AVSubtitleRect,
    pub pts: i64,
}
#[test]
fn bindgen_test_layout_AVSubtitle() {
    assert_eq!(::std::mem::size_of::<AVSubtitle>() , 32usize);
    assert_eq!(::std::mem::align_of::<AVSubtitle>() , 8usize);
}
impl Clone for AVSubtitle {
    fn clone(&self) -> Self { *self }
}
pub type AVCodec = AVCodecContext_AVCodec;
extern "C" {
    pub fn av_codec_get_max_lowres(codec: *const AVCodec)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MpegEncContext([u8; 0]);
pub type AVHWAccel = AVCodecContext_AVHWAccel;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVPicture {
    pub data: [*mut u8; 8usize],
    pub linesize: [::std::os::raw::c_int; 8usize],
}
impl Clone for AVPicture {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVSubtitleType {
    SUBTITLE_NONE = 0,
    SUBTITLE_BITMAP = 1,
    SUBTITLE_TEXT = 2,
    SUBTITLE_ASS = 3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVSubtitleRect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub nb_colors: ::std::os::raw::c_int,
    pub pict: AVPicture,
    pub data: [*mut u8; 4usize],
    pub linesize: [::std::os::raw::c_int; 4usize],
    pub type_: AVSubtitleType,
    pub text: *mut ::std::os::raw::c_char,
    pub ass: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
}
impl Clone for AVSubtitleRect {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn av_codec_next(c: *const AVCodec) -> *mut AVCodec;
}
extern "C" {
    pub fn avcodec_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avcodec_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avcodec_license() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avcodec_register(codec: *mut AVCodec);
}
extern "C" {
    pub fn avcodec_register_all();
}
extern "C" {
    pub fn avcodec_alloc_context3(codec: *const AVCodec)
     -> *mut AVCodecContext;
}
extern "C" {
    pub fn avcodec_free_context(avctx: *mut *mut AVCodecContext);
}
extern "C" {
    pub fn avcodec_get_context_defaults3(s: *mut AVCodecContext,
                                         codec: *const AVCodec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_get_class() -> *const AVClass;
}
extern "C" {
    pub fn avcodec_get_frame_class() -> *const AVClass;
}
extern "C" {
    pub fn avcodec_get_subtitle_rect_class() -> *const AVClass;
}
extern "C" {
    pub fn avcodec_copy_context(dest: *mut AVCodecContext,
                                src: *const AVCodecContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_open2(avctx: *mut AVCodecContext, codec: *const AVCodec,
                         options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_close(avctx: *mut AVCodecContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avsubtitle_free(sub: *mut AVSubtitle);
}
extern "C" {
    pub fn av_packet_alloc() -> *mut AVPacket;
}
extern "C" {
    pub fn av_packet_clone(src: *mut AVPacket) -> *mut AVPacket;
}
extern "C" {
    pub fn av_packet_free(pkt: *mut *mut AVPacket);
}
extern "C" {
    pub fn av_init_packet(pkt: *mut AVPacket);
}
extern "C" {
    pub fn av_new_packet(pkt: *mut AVPacket, size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_shrink_packet(pkt: *mut AVPacket, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_grow_packet(pkt: *mut AVPacket, grow_by: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_from_data(pkt: *mut AVPacket, data: *mut u8,
                               size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_dup_packet(pkt: *mut AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_copy_packet(dst: *mut AVPacket, src: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_copy_packet_side_data(dst: *mut AVPacket, src: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_free_packet(pkt: *mut AVPacket);
}
extern "C" {
    pub fn av_packet_new_side_data(pkt: *mut AVPacket,
                                   type_: AVPacketSideDataType,
                                   size: ::std::os::raw::c_int) -> *mut u8;
}
extern "C" {
    pub fn av_packet_add_side_data(pkt: *mut AVPacket,
                                   type_: AVPacketSideDataType, data: *mut u8,
                                   size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_shrink_side_data(pkt: *mut AVPacket,
                                      type_: AVPacketSideDataType,
                                      size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_get_side_data(pkt: *mut AVPacket,
                                   type_: AVPacketSideDataType,
                                   size: *mut ::std::os::raw::c_int)
     -> *mut u8;
}
extern "C" {
    pub fn av_packet_merge_side_data(pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_split_side_data(pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_side_data_name(type_: AVPacketSideDataType)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_packet_pack_dictionary(dict: *mut AVDictionary,
                                     size: *mut ::std::os::raw::c_int)
     -> *mut u8;
}
extern "C" {
    pub fn av_packet_unpack_dictionary(data: *const u8,
                                       size: ::std::os::raw::c_int,
                                       dict: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_free_side_data(pkt: *mut AVPacket);
}
extern "C" {
    pub fn av_packet_ref(dst: *mut AVPacket, src: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_unref(pkt: *mut AVPacket);
}
extern "C" {
    pub fn av_packet_move_ref(dst: *mut AVPacket, src: *mut AVPacket);
}
extern "C" {
    pub fn av_packet_copy_props(dst: *mut AVPacket, src: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_packet_rescale_ts(pkt: *mut AVPacket, tb_src: AVRational,
                                tb_dst: AVRational);
}
extern "C" {
    pub fn avcodec_find_decoder(id: AVCodecID) -> *mut AVCodec;
}
extern "C" {
    pub fn avcodec_find_decoder_by_name(name: *const ::std::os::raw::c_char)
     -> *mut AVCodec;
}
extern "C" {
    pub fn avcodec_default_get_buffer2(s: *mut AVCodecContext,
                                       frame: *mut AVFrame,
                                       flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_get_edge_width() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avcodec_align_dimensions(s: *mut AVCodecContext,
                                    width: *mut ::std::os::raw::c_int,
                                    height: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn avcodec_align_dimensions2(s: *mut AVCodecContext,
                                     width: *mut ::std::os::raw::c_int,
                                     height: *mut ::std::os::raw::c_int,
                                     linesize_align:
                                         *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn avcodec_enum_to_chroma_pos(xpos: *mut ::std::os::raw::c_int,
                                      ypos: *mut ::std::os::raw::c_int,
                                      pos: AVChromaLocation)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_chroma_pos_to_enum(xpos: ::std::os::raw::c_int,
                                      ypos: ::std::os::raw::c_int)
     -> AVChromaLocation;
}
extern "C" {
    pub fn avcodec_decode_audio4(avctx: *mut AVCodecContext,
                                 frame: *mut AVFrame,
                                 got_frame_ptr: *mut ::std::os::raw::c_int,
                                 avpkt: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_decode_video2(avctx: *mut AVCodecContext,
                                 picture: *mut AVFrame,
                                 got_picture_ptr: *mut ::std::os::raw::c_int,
                                 avpkt: *const AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_decode_subtitle2(avctx: *mut AVCodecContext,
                                    sub: *mut AVSubtitle,
                                    got_sub_ptr: *mut ::std::os::raw::c_int,
                                    avpkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVPictureStructure {
    AV_PICTURE_STRUCTURE_UNKNOWN = 0,
    AV_PICTURE_STRUCTURE_TOP_FIELD = 1,
    AV_PICTURE_STRUCTURE_BOTTOM_FIELD = 2,
    AV_PICTURE_STRUCTURE_FRAME = 3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecParserContext {
    pub priv_data: *mut ::std::os::raw::c_void,
    pub parser: *mut AVCodecParserContext_AVCodecParser,
    pub frame_offset: i64,
    pub cur_offset: i64,
    pub next_frame_offset: i64,
    pub pict_type: ::std::os::raw::c_int,
    pub repeat_pict: ::std::os::raw::c_int,
    pub pts: i64,
    pub dts: i64,
    pub last_pts: i64,
    pub last_dts: i64,
    pub fetch_timestamp: ::std::os::raw::c_int,
    pub cur_frame_start_index: ::std::os::raw::c_int,
    pub cur_frame_offset: [i64; 4usize],
    pub cur_frame_pts: [i64; 4usize],
    pub cur_frame_dts: [i64; 4usize],
    pub flags: ::std::os::raw::c_int,
    pub offset: i64,
    pub cur_frame_end: [i64; 4usize],
    pub key_frame: ::std::os::raw::c_int,
    pub convergence_duration: i64,
    pub dts_sync_point: ::std::os::raw::c_int,
    pub dts_ref_dts_delta: ::std::os::raw::c_int,
    pub pts_dts_delta: ::std::os::raw::c_int,
    pub cur_frame_pos: [i64; 4usize],
    pub pos: i64,
    pub last_pos: i64,
    pub duration: ::std::os::raw::c_int,
    pub field_order: AVFieldOrder,
    pub picture_structure: AVPictureStructure,
    pub output_picture_number: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub coded_width: ::std::os::raw::c_int,
    pub coded_height: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVCodecParserContext_AVCodecParser {
    pub codec_ids: [::std::os::raw::c_int; 5usize],
    pub priv_data_size: ::std::os::raw::c_int,
    pub parser_init: ::std::option::Option<unsafe extern "C" fn(s:
                                                                    *mut AVCodecParserContext)
                                               -> ::std::os::raw::c_int>,
    pub parser_parse: ::std::option::Option<unsafe extern "C" fn(s:
                                                                     *mut AVCodecParserContext,
                                                                 avctx:
                                                                     *mut AVCodecContext,
                                                                 poutbuf:
                                                                     *mut *const u8,
                                                                 poutbuf_size:
                                                                     *mut ::std::os::raw::c_int,
                                                                 buf:
                                                                     *const u8,
                                                                 buf_size:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
    pub parser_close: ::std::option::Option<unsafe extern "C" fn(s:
                                                                     *mut AVCodecParserContext)>,
    pub split: ::std::option::Option<unsafe extern "C" fn(avctx:
                                                              *mut AVCodecContext,
                                                          buf: *const u8,
                                                          buf_size:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub next: *mut AVCodecParserContext_AVCodecParser,
}
#[test]
fn bindgen_test_layout_AVCodecParserContext_AVCodecParser() {
    assert_eq!(::std::mem::size_of::<AVCodecParserContext_AVCodecParser>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<AVCodecParserContext_AVCodecParser>() ,
               8usize);
}
impl Clone for AVCodecParserContext_AVCodecParser {
    fn clone(&self) -> Self { *self }
}
impl Clone for AVCodecParserContext {
    fn clone(&self) -> Self { *self }
}
pub type AVCodecParser = AVCodecParserContext_AVCodecParser;
extern "C" {
    pub fn av_parser_next(c: *const AVCodecParser) -> *mut AVCodecParser;
}
extern "C" {
    pub fn av_register_codec_parser(parser: *mut AVCodecParser);
}
extern "C" {
    pub fn av_parser_init(codec_id: ::std::os::raw::c_int)
     -> *mut AVCodecParserContext;
}
extern "C" {
    pub fn av_parser_parse2(s: *mut AVCodecParserContext,
                            avctx: *mut AVCodecContext, poutbuf: *mut *mut u8,
                            poutbuf_size: *mut ::std::os::raw::c_int,
                            buf: *const u8, buf_size: ::std::os::raw::c_int,
                            pts: i64, dts: i64, pos: i64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_parser_change(s: *mut AVCodecParserContext,
                            avctx: *mut AVCodecContext, poutbuf: *mut *mut u8,
                            poutbuf_size: *mut ::std::os::raw::c_int,
                            buf: *const u8, buf_size: ::std::os::raw::c_int,
                            keyframe: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_parser_close(s: *mut AVCodecParserContext);
}
extern "C" {
    pub fn avcodec_find_encoder(id: AVCodecID) -> *mut AVCodec;
}
extern "C" {
    pub fn avcodec_find_encoder_by_name(name: *const ::std::os::raw::c_char)
     -> *mut AVCodec;
}
extern "C" {
    pub fn avcodec_encode_audio2(avctx: *mut AVCodecContext,
                                 avpkt: *mut AVPacket, frame: *const AVFrame,
                                 got_packet_ptr: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_encode_video2(avctx: *mut AVCodecContext,
                                 avpkt: *mut AVPacket, frame: *const AVFrame,
                                 got_packet_ptr: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_encode_subtitle(avctx: *mut AVCodecContext, buf: *mut u8,
                                   buf_size: ::std::os::raw::c_int,
                                   sub: *const AVSubtitle)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReSampleContext([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVResampleContext([u8; 0]);
extern "C" {
    pub fn av_audio_resample_init(output_channels: ::std::os::raw::c_int,
                                  input_channels: ::std::os::raw::c_int,
                                  output_rate: ::std::os::raw::c_int,
                                  input_rate: ::std::os::raw::c_int,
                                  sample_fmt_out: AVSampleFormat,
                                  sample_fmt_in: AVSampleFormat,
                                  filter_length: ::std::os::raw::c_int,
                                  log2_phase_count: ::std::os::raw::c_int,
                                  linear: ::std::os::raw::c_int, cutoff: f64)
     -> *mut ReSampleContext;
}
extern "C" {
    pub fn audio_resample(s: *mut ReSampleContext,
                          output: *mut ::std::os::raw::c_short,
                          input: *mut ::std::os::raw::c_short,
                          nb_samples: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audio_resample_close(s: *mut ReSampleContext);
}
extern "C" {
    pub fn av_resample_init(out_rate: ::std::os::raw::c_int,
                            in_rate: ::std::os::raw::c_int,
                            filter_length: ::std::os::raw::c_int,
                            log2_phase_count: ::std::os::raw::c_int,
                            linear: ::std::os::raw::c_int, cutoff: f64)
     -> *mut AVResampleContext;
}
extern "C" {
    pub fn av_resample(c: *mut AVResampleContext,
                       dst: *mut ::std::os::raw::c_short,
                       src: *mut ::std::os::raw::c_short,
                       consumed: *mut ::std::os::raw::c_int,
                       src_size: ::std::os::raw::c_int,
                       dst_size: ::std::os::raw::c_int,
                       update_ctx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_resample_compensate(c: *mut AVResampleContext,
                                  sample_delta: ::std::os::raw::c_int,
                                  compensation_distance:
                                      ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_resample_close(c: *mut AVResampleContext);
}
extern "C" {
    pub fn avpicture_alloc(picture: *mut AVPicture, pix_fmt: AVPixelFormat,
                           width: ::std::os::raw::c_int,
                           height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avpicture_free(picture: *mut AVPicture);
}
extern "C" {
    pub fn avpicture_fill(picture: *mut AVPicture, ptr: *const u8,
                          pix_fmt: AVPixelFormat,
                          width: ::std::os::raw::c_int,
                          height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avpicture_layout(src: *const AVPicture, pix_fmt: AVPixelFormat,
                            width: ::std::os::raw::c_int,
                            height: ::std::os::raw::c_int,
                            dest: *mut ::std::os::raw::c_uchar,
                            dest_size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avpicture_get_size(pix_fmt: AVPixelFormat,
                              width: ::std::os::raw::c_int,
                              height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_picture_copy(dst: *mut AVPicture, src: *const AVPicture,
                           pix_fmt: AVPixelFormat,
                           width: ::std::os::raw::c_int,
                           height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_picture_crop(dst: *mut AVPicture, src: *const AVPicture,
                           pix_fmt: AVPixelFormat,
                           top_band: ::std::os::raw::c_int,
                           left_band: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_picture_pad(dst: *mut AVPicture, src: *const AVPicture,
                          height: ::std::os::raw::c_int,
                          width: ::std::os::raw::c_int,
                          pix_fmt: AVPixelFormat,
                          padtop: ::std::os::raw::c_int,
                          padbottom: ::std::os::raw::c_int,
                          padleft: ::std::os::raw::c_int,
                          padright: ::std::os::raw::c_int,
                          color: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_get_chroma_sub_sample(pix_fmt: AVPixelFormat,
                                         h_shift: *mut ::std::os::raw::c_int,
                                         v_shift: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn avcodec_pix_fmt_to_codec_tag(pix_fmt: AVPixelFormat)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avcodec_get_pix_fmt_loss(dst_pix_fmt: AVPixelFormat,
                                    src_pix_fmt: AVPixelFormat,
                                    has_alpha: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_find_best_pix_fmt_of_list(pix_fmt_list:
                                                 *const AVPixelFormat,
                                             src_pix_fmt: AVPixelFormat,
                                             has_alpha: ::std::os::raw::c_int,
                                             loss_ptr:
                                                 *mut ::std::os::raw::c_int)
     -> AVPixelFormat;
}
extern "C" {
    pub fn avcodec_find_best_pix_fmt_of_2(dst_pix_fmt1: AVPixelFormat,
                                          dst_pix_fmt2: AVPixelFormat,
                                          src_pix_fmt: AVPixelFormat,
                                          has_alpha: ::std::os::raw::c_int,
                                          loss_ptr:
                                              *mut ::std::os::raw::c_int)
     -> AVPixelFormat;
}
extern "C" {
    pub fn avcodec_find_best_pix_fmt2(dst_pix_fmt1: AVPixelFormat,
                                      dst_pix_fmt2: AVPixelFormat,
                                      src_pix_fmt: AVPixelFormat,
                                      has_alpha: ::std::os::raw::c_int,
                                      loss_ptr: *mut ::std::os::raw::c_int)
     -> AVPixelFormat;
}
extern "C" {
    pub fn avcodec_default_get_format(s: *mut AVCodecContext,
                                      fmt: *const AVPixelFormat)
     -> AVPixelFormat;
}
extern "C" {
    pub fn avcodec_set_dimensions(s: *mut AVCodecContext,
                                  width: ::std::os::raw::c_int,
                                  height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_get_codec_tag_string(buf: *mut ::std::os::raw::c_char,
                                   buf_size: usize,
                                   codec_tag: ::std::os::raw::c_uint)
     -> usize;
}
extern "C" {
    pub fn avcodec_string(buf: *mut ::std::os::raw::c_char,
                          buf_size: ::std::os::raw::c_int,
                          enc: *mut AVCodecContext,
                          encode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_get_profile_name(codec: *const AVCodec,
                               profile: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avcodec_profile_name(codec_id: AVCodecID,
                                profile: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avcodec_default_execute(c: *mut AVCodecContext,
                                   func:
                                       ::std::option::Option<unsafe extern "C" fn(c2:
                                                                                      *mut AVCodecContext,
                                                                                  arg2:
                                                                                      *mut ::std::os::raw::c_void)
                                                                 ->
                                                                     ::std::os::raw::c_int>,
                                   arg: *mut ::std::os::raw::c_void,
                                   ret: *mut ::std::os::raw::c_int,
                                   count: ::std::os::raw::c_int,
                                   size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_default_execute2(c: *mut AVCodecContext,
                                    func:
                                        ::std::option::Option<unsafe extern "C" fn(c2:
                                                                                       *mut AVCodecContext,
                                                                                   arg2:
                                                                                       *mut ::std::os::raw::c_void,
                                                                                   arg1:
                                                                                       ::std::os::raw::c_int,
                                                                                   arg2:
                                                                                       ::std::os::raw::c_int)
                                                                  ->
                                                                      ::std::os::raw::c_int>,
                                    arg: *mut ::std::os::raw::c_void,
                                    ret: *mut ::std::os::raw::c_int,
                                    count: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_fill_audio_frame(frame: *mut AVFrame,
                                    nb_channels: ::std::os::raw::c_int,
                                    sample_fmt: AVSampleFormat,
                                    buf: *const u8,
                                    buf_size: ::std::os::raw::c_int,
                                    align: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_flush_buffers(avctx: *mut AVCodecContext);
}
extern "C" {
    pub fn av_get_bits_per_sample(codec_id: AVCodecID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_get_pcm_codec(fmt: AVSampleFormat, be: ::std::os::raw::c_int)
     -> AVCodecID;
}
extern "C" {
    pub fn av_get_exact_bits_per_sample(codec_id: AVCodecID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_get_audio_frame_duration(avctx: *mut AVCodecContext,
                                       frame_bytes: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVBitStreamFilterContext {
    pub priv_data: *mut ::std::os::raw::c_void,
    pub filter: *mut AVBitStreamFilterContext_AVBitStreamFilter,
    pub parser: *mut AVCodecParserContext,
    pub next: *mut AVBitStreamFilterContext,
    pub args: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVBitStreamFilterContext_AVBitStreamFilter {
    pub name: *const ::std::os::raw::c_char,
    pub priv_data_size: ::std::os::raw::c_int,
    pub filter: ::std::option::Option<unsafe extern "C" fn(bsfc:
                                                               *mut AVBitStreamFilterContext,
                                                           avctx:
                                                               *mut AVCodecContext,
                                                           args:
                                                               *const ::std::os::raw::c_char,
                                                           poutbuf:
                                                               *mut *mut u8,
                                                           poutbuf_size:
                                                               *mut ::std::os::raw::c_int,
                                                           buf: *const u8,
                                                           buf_size:
                                                               ::std::os::raw::c_int,
                                                           keyframe:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub close: ::std::option::Option<unsafe extern "C" fn(bsfc:
                                                              *mut AVBitStreamFilterContext)>,
    pub next: *mut AVBitStreamFilterContext_AVBitStreamFilter,
}
#[test]
fn bindgen_test_layout_AVBitStreamFilterContext_AVBitStreamFilter() {
    assert_eq!(::std::mem::size_of::<AVBitStreamFilterContext_AVBitStreamFilter>()
               , 40usize);
    assert_eq!(::std::mem::align_of::<AVBitStreamFilterContext_AVBitStreamFilter>()
               , 8usize);
}
impl Clone for AVBitStreamFilterContext_AVBitStreamFilter {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_AVBitStreamFilterContext() {
    assert_eq!(::std::mem::size_of::<AVBitStreamFilterContext>() , 40usize);
    assert_eq!(::std::mem::align_of::<AVBitStreamFilterContext>() , 8usize);
}
impl Clone for AVBitStreamFilterContext {
    fn clone(&self) -> Self { *self }
}
pub type AVBitStreamFilter = AVBitStreamFilterContext_AVBitStreamFilter;
extern "C" {
    pub fn av_register_bitstream_filter(bsf: *mut AVBitStreamFilter);
}
extern "C" {
    pub fn av_bitstream_filter_init(name: *const ::std::os::raw::c_char)
     -> *mut AVBitStreamFilterContext;
}
extern "C" {
    pub fn av_bitstream_filter_filter(bsfc: *mut AVBitStreamFilterContext,
                                      avctx: *mut AVCodecContext,
                                      args: *const ::std::os::raw::c_char,
                                      poutbuf: *mut *mut u8,
                                      poutbuf_size:
                                          *mut ::std::os::raw::c_int,
                                      buf: *const u8,
                                      buf_size: ::std::os::raw::c_int,
                                      keyframe: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_bitstream_filter_close(bsf: *mut AVBitStreamFilterContext);
}
extern "C" {
    pub fn av_bitstream_filter_next(f: *const AVBitStreamFilter)
     -> *mut AVBitStreamFilter;
}
extern "C" {
    pub fn av_fast_padded_malloc(ptr: *mut ::std::os::raw::c_void,
                                 size: *mut ::std::os::raw::c_uint,
                                 min_size: usize);
}
extern "C" {
    pub fn av_fast_padded_mallocz(ptr: *mut ::std::os::raw::c_void,
                                  size: *mut ::std::os::raw::c_uint,
                                  min_size: usize);
}
extern "C" {
    pub fn av_xiphlacing(s: *mut ::std::os::raw::c_uchar,
                         v: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn av_log_missing_feature(avc: *mut ::std::os::raw::c_void,
                                  feature: *const ::std::os::raw::c_char,
                                  want_sample: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_log_ask_for_sample(avc: *mut ::std::os::raw::c_void,
                                 msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn av_register_hwaccel(hwaccel: *mut AVHWAccel);
}
extern "C" {
    pub fn av_hwaccel_next(hwaccel: *const AVHWAccel) -> *mut AVHWAccel;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVLockOp {
    AV_LOCK_CREATE = 0,
    AV_LOCK_OBTAIN = 1,
    AV_LOCK_RELEASE = 2,
    AV_LOCK_DESTROY = 3,
}
extern "C" {
    pub fn av_lockmgr_register(cb:
                                   ::std::option::Option<unsafe extern "C" fn(mutex:
                                                                                  *mut *mut ::std::os::raw::c_void,
                                                                              op:
                                                                                  AVLockOp)
                                                             ->
                                                                 ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_get_type(codec_id: AVCodecID) -> AVMediaType;
}
extern "C" {
    pub fn avcodec_get_name(id: AVCodecID) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avcodec_is_open(s: *mut AVCodecContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_codec_is_encoder(codec: *const AVCodec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_codec_is_decoder(codec: *const AVCodec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avcodec_descriptor_get(id: AVCodecID) -> *const AVCodecDescriptor;
}
extern "C" {
    pub fn avcodec_descriptor_next(prev: *const AVCodecDescriptor)
     -> *const AVCodecDescriptor;
}
extern "C" {
    pub fn avcodec_descriptor_get_by_name(name: *const ::std::os::raw::c_char)
     -> *const AVCodecDescriptor;
}
extern "C" {
    pub fn av_cpb_properties_alloc(size: *mut usize) -> *mut AVCPBProperties;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize);
    assert_eq!(::std::mem::align_of::<tm>() , 8usize);
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize);
    assert_eq!(::std::mem::align_of::<itimerspec>() , 8usize);
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent([u8; 0]);
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIOInterruptCB {
    pub callback: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut ::std::os::raw::c_void)
                                            -> ::std::os::raw::c_int>,
    pub opaque: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AVIOInterruptCB() {
    assert_eq!(::std::mem::size_of::<AVIOInterruptCB>() , 16usize);
    assert_eq!(::std::mem::align_of::<AVIOInterruptCB>() , 8usize);
}
impl Clone for AVIOInterruptCB {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVIODirEntryType {
    AVIO_ENTRY_UNKNOWN = 0,
    AVIO_ENTRY_BLOCK_DEVICE = 1,
    AVIO_ENTRY_CHARACTER_DEVICE = 2,
    AVIO_ENTRY_DIRECTORY = 3,
    AVIO_ENTRY_NAMED_PIPE = 4,
    AVIO_ENTRY_SYMBOLIC_LINK = 5,
    AVIO_ENTRY_SOCKET = 6,
    AVIO_ENTRY_FILE = 7,
    AVIO_ENTRY_SERVER = 8,
    AVIO_ENTRY_SHARE = 9,
    AVIO_ENTRY_WORKGROUP = 10,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIODirEntry {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub utf8: ::std::os::raw::c_int,
    pub size: i64,
    pub modification_timestamp: i64,
    pub access_timestamp: i64,
    pub status_change_timestamp: i64,
    pub user_id: i64,
    pub group_id: i64,
    pub filemode: i64,
}
#[test]
fn bindgen_test_layout_AVIODirEntry() {
    assert_eq!(::std::mem::size_of::<AVIODirEntry>() , 72usize);
    assert_eq!(::std::mem::align_of::<AVIODirEntry>() , 8usize);
}
impl Clone for AVIODirEntry {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIODirContext {
    pub url_context: *mut AVIODirContext_URLContext,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVIODirContext_URLContext([u8; 0]);
#[test]
fn bindgen_test_layout_AVIODirContext() {
    assert_eq!(::std::mem::size_of::<AVIODirContext>() , 8usize);
    assert_eq!(::std::mem::align_of::<AVIODirContext>() , 8usize);
}
impl Clone for AVIODirContext {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIOContext {
    pub av_class: *const AVClass,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub buffer_size: ::std::os::raw::c_int,
    pub buf_ptr: *mut ::std::os::raw::c_uchar,
    pub buf_end: *mut ::std::os::raw::c_uchar,
    pub opaque: *mut ::std::os::raw::c_void,
    pub read_packet: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                    *mut ::std::os::raw::c_void,
                                                                buf: *mut u8,
                                                                buf_size:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    pub write_packet: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                     *mut ::std::os::raw::c_void,
                                                                 buf: *mut u8,
                                                                 buf_size:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
    pub seek: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                             *mut ::std::os::raw::c_void,
                                                         offset: i64,
                                                         whence:
                                                             ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_long>,
    pub pos: i64,
    pub must_flush: ::std::os::raw::c_int,
    pub eof_reached: ::std::os::raw::c_int,
    pub write_flag: ::std::os::raw::c_int,
    pub max_packet_size: ::std::os::raw::c_int,
    pub checksum: ::std::os::raw::c_ulong,
    pub checksum_ptr: *mut ::std::os::raw::c_uchar,
    pub update_checksum: ::std::option::Option<unsafe extern "C" fn(checksum:
                                                                        ::std::os::raw::c_ulong,
                                                                    buf:
                                                                        *const u8,
                                                                    size:
                                                                        ::std::os::raw::c_uint)
                                                   ->
                                                       ::std::os::raw::c_ulong>,
    pub error: ::std::os::raw::c_int,
    pub read_pause: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                   *mut ::std::os::raw::c_void,
                                                               pause:
                                                                   ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int>,
    pub read_seek: ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                  *mut ::std::os::raw::c_void,
                                                              stream_index:
                                                                  ::std::os::raw::c_int,
                                                              timestamp: i64,
                                                              flags:
                                                                  ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_long>,
    pub seekable: ::std::os::raw::c_int,
    pub maxsize: i64,
    pub direct: ::std::os::raw::c_int,
    pub bytes_read: i64,
    pub seek_count: ::std::os::raw::c_int,
    pub writeout_count: ::std::os::raw::c_int,
    pub orig_buffer_size: ::std::os::raw::c_int,
    pub short_seek_threshold: ::std::os::raw::c_int,
    pub protocol_whitelist: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVIOContext() {
    assert_eq!(::std::mem::size_of::<AVIOContext>() , 200usize);
    assert_eq!(::std::mem::align_of::<AVIOContext>() , 8usize);
}
impl Clone for AVIOContext {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn avio_find_protocol_name(url: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avio_check(url: *const ::std::os::raw::c_char,
                      flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avpriv_io_move(url_src: *const ::std::os::raw::c_char,
                          url_dst: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avpriv_io_delete(url: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_open_dir(s: *mut *mut AVIODirContext,
                         url: *const ::std::os::raw::c_char,
                         options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_read_dir(s: *mut AVIODirContext, next: *mut *mut AVIODirEntry)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_close_dir(s: *mut *mut AVIODirContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_free_directory_entry(entry: *mut *mut AVIODirEntry);
}
extern "C" {
    pub fn avio_alloc_context(buffer: *mut ::std::os::raw::c_uchar,
                              buffer_size: ::std::os::raw::c_int,
                              write_flag: ::std::os::raw::c_int,
                              opaque: *mut ::std::os::raw::c_void,
                              read_packet:
                                  ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             buf:
                                                                                 *mut u8,
                                                                             buf_size:
                                                                                 ::std::os::raw::c_int)
                                                            ->
                                                                ::std::os::raw::c_int>,
                              write_packet:
                                  ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             buf:
                                                                                 *mut u8,
                                                                             buf_size:
                                                                                 ::std::os::raw::c_int)
                                                            ->
                                                                ::std::os::raw::c_int>,
                              seek:
                                  ::std::option::Option<unsafe extern "C" fn(opaque:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             offset:
                                                                                 i64,
                                                                             whence:
                                                                                 ::std::os::raw::c_int)
                                                            ->
                                                                ::std::os::raw::c_long>)
     -> *mut AVIOContext;
}
extern "C" {
    pub fn avio_w8(s: *mut AVIOContext, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn avio_write(s: *mut AVIOContext,
                      buf: *const ::std::os::raw::c_uchar,
                      size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn avio_wl64(s: *mut AVIOContext, val: u64);
}
extern "C" {
    pub fn avio_wb64(s: *mut AVIOContext, val: u64);
}
extern "C" {
    pub fn avio_wl32(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wb32(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wl24(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wb24(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wl16(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_wb16(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn avio_put_str(s: *mut AVIOContext,
                        str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_put_str16le(s: *mut AVIOContext,
                            str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_put_str16be(s: *mut AVIOContext,
                            str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_seek(s: *mut AVIOContext, offset: i64,
                     whence: ::std::os::raw::c_int) -> i64;
}
extern "C" {
    pub fn avio_skip(s: *mut AVIOContext, offset: i64) -> i64;
}
extern "C" {
    pub fn avio_size(s: *mut AVIOContext) -> i64;
}
extern "C" {
    pub fn avio_feof(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn url_feof(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_printf(s: *mut AVIOContext,
                       fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_flush(s: *mut AVIOContext);
}
extern "C" {
    pub fn avio_read(s: *mut AVIOContext, buf: *mut ::std::os::raw::c_uchar,
                     size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_r8(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_rl16(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rl24(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rl32(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rl64(s: *mut AVIOContext) -> u64;
}
extern "C" {
    pub fn avio_rb16(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rb24(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rb32(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avio_rb64(s: *mut AVIOContext) -> u64;
}
extern "C" {
    pub fn avio_get_str(pb: *mut AVIOContext, maxlen: ::std::os::raw::c_int,
                        buf: *mut ::std::os::raw::c_char,
                        buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_get_str16le(pb: *mut AVIOContext,
                            maxlen: ::std::os::raw::c_int,
                            buf: *mut ::std::os::raw::c_char,
                            buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_get_str16be(pb: *mut AVIOContext,
                            maxlen: ::std::os::raw::c_int,
                            buf: *mut ::std::os::raw::c_char,
                            buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_open(s: *mut *mut AVIOContext,
                     url: *const ::std::os::raw::c_char,
                     flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_open2(s: *mut *mut AVIOContext,
                      url: *const ::std::os::raw::c_char,
                      flags: ::std::os::raw::c_int,
                      int_cb: *const AVIOInterruptCB,
                      options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_close(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_closep(s: *mut *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_open_dyn_buf(s: *mut *mut AVIOContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_close_dyn_buf(s: *mut AVIOContext, pbuffer: *mut *mut u8)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_enum_protocols(opaque: *mut *mut ::std::os::raw::c_void,
                               output: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avio_pause(h: *mut AVIOContext, pause: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_seek_time(h: *mut AVIOContext,
                          stream_index: ::std::os::raw::c_int, timestamp: i64,
                          flags: ::std::os::raw::c_int) -> i64;
}
extern "C" {
    pub fn avio_read_to_bprint(h: *mut AVIOContext, pb: *mut AVBPrint,
                               max_size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_accept(s: *mut AVIOContext, c: *mut *mut AVIOContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avio_handshake(c: *mut AVIOContext) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct AVFormatContext {
    pub av_class: *const AVClass,
    pub iformat: *mut AVInputFormat,
    pub oformat: *mut AVOutputFormat,
    pub priv_data: *mut ::std::os::raw::c_void,
    pub pb: *mut AVIOContext,
    pub ctx_flags: ::std::os::raw::c_int,
    pub nb_streams: ::std::os::raw::c_uint,
    pub streams: *mut *mut AVStream,
    pub filename: [::std::os::raw::c_char; 1024usize],
    pub start_time: i64,
    pub duration: i64,
    pub bit_rate: i64,
    pub packet_size: ::std::os::raw::c_uint,
    pub max_delay: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub probesize: i64,
    pub max_analyze_duration: i64,
    pub key: *const u8,
    pub keylen: ::std::os::raw::c_int,
    pub nb_programs: ::std::os::raw::c_uint,
    pub programs: *mut *mut AVProgram,
    pub video_codec_id: AVCodecID,
    pub audio_codec_id: AVCodecID,
    pub subtitle_codec_id: AVCodecID,
    pub max_index_size: ::std::os::raw::c_uint,
    pub max_picture_buffer: ::std::os::raw::c_uint,
    pub nb_chapters: ::std::os::raw::c_uint,
    pub chapters: *mut *mut AVChapter,
    pub metadata: *mut AVDictionary,
    pub start_time_realtime: i64,
    pub fps_probe_size: ::std::os::raw::c_int,
    pub error_recognition: ::std::os::raw::c_int,
    pub interrupt_callback: AVIOInterruptCB,
    pub debug: ::std::os::raw::c_int,
    pub max_interleave_delta: i64,
    pub strict_std_compliance: ::std::os::raw::c_int,
    pub event_flags: ::std::os::raw::c_int,
    pub max_ts_probe: ::std::os::raw::c_int,
    pub avoid_negative_ts: ::std::os::raw::c_int,
    pub ts_id: ::std::os::raw::c_int,
    pub audio_preload: ::std::os::raw::c_int,
    pub max_chunk_duration: ::std::os::raw::c_int,
    pub max_chunk_size: ::std::os::raw::c_int,
    pub use_wallclock_as_timestamps: ::std::os::raw::c_int,
    pub avio_flags: ::std::os::raw::c_int,
    pub duration_estimation_method: AVDurationEstimationMethod,
    pub skip_initial_bytes: i64,
    pub correct_ts_overflow: ::std::os::raw::c_uint,
    pub seek2any: ::std::os::raw::c_int,
    pub flush_packets: ::std::os::raw::c_int,
    pub probe_score: ::std::os::raw::c_int,
    pub format_probesize: ::std::os::raw::c_int,
    pub codec_whitelist: *mut ::std::os::raw::c_char,
    pub format_whitelist: *mut ::std::os::raw::c_char,
    pub internal: *mut AVFormatInternal,
    pub io_repositioned: ::std::os::raw::c_int,
    pub video_codec: *mut AVCodec,
    pub audio_codec: *mut AVCodec,
    pub subtitle_codec: *mut AVCodec,
    pub data_codec: *mut AVCodec,
    pub metadata_header_padding: ::std::os::raw::c_int,
    pub opaque: *mut ::std::os::raw::c_void,
    pub control_message_cb: av_format_control_message,
    pub output_ts_offset: i64,
    pub dump_separator: *mut u8,
    pub data_codec_id: AVCodecID,
    pub open_cb: ::std::option::Option<unsafe extern "C" fn(s:
                                                                *mut AVFormatContext,
                                                            p:
                                                                *mut *mut AVIOContext,
                                                            url:
                                                                *const ::std::os::raw::c_char,
                                                            flags:
                                                                ::std::os::raw::c_int,
                                                            int_cb:
                                                                *const AVIOInterruptCB,
                                                            options:
                                                                *mut *mut AVDictionary)
                                           -> ::std::os::raw::c_int>,
    pub protocol_whitelist: *mut ::std::os::raw::c_char,
    pub io_open: ::std::option::Option<unsafe extern "C" fn(s:
                                                                *mut AVFormatContext,
                                                            pb:
                                                                *mut *mut AVIOContext,
                                                            url:
                                                                *const ::std::os::raw::c_char,
                                                            flags:
                                                                ::std::os::raw::c_int,
                                                            options:
                                                                *mut *mut AVDictionary)
                                           -> ::std::os::raw::c_int>,
    pub io_close: ::std::option::Option<unsafe extern "C" fn(s:
                                                                 *mut AVFormatContext,
                                                             pb:
                                                                 *mut AVIOContext)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDeviceInfoList([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDeviceCapabilitiesQuery([u8; 0]);
extern "C" {
    pub fn av_get_packet(s: *mut AVIOContext, pkt: *mut AVPacket,
                         size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_append_packet(s: *mut AVIOContext, pkt: *mut AVPacket,
                            size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVFrac {
    pub val: i64,
    pub num: i64,
    pub den: i64,
}
#[test]
fn bindgen_test_layout_AVFrac() {
    assert_eq!(::std::mem::size_of::<AVFrac>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVFrac>() , 8usize);
}
impl Clone for AVFrac {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecTag([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVProbeData {
    pub filename: *const ::std::os::raw::c_char,
    pub buf: *mut ::std::os::raw::c_uchar,
    pub buf_size: ::std::os::raw::c_int,
    pub mime_type: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVProbeData() {
    assert_eq!(::std::mem::size_of::<AVProbeData>() , 32usize);
    assert_eq!(::std::mem::align_of::<AVProbeData>() , 8usize);
}
impl Clone for AVProbeData {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVOutputFormat {
    pub name: *const ::std::os::raw::c_char,
    pub long_name: *const ::std::os::raw::c_char,
    pub mime_type: *const ::std::os::raw::c_char,
    pub extensions: *const ::std::os::raw::c_char,
    pub audio_codec: AVCodecID,
    pub video_codec: AVCodecID,
    pub subtitle_codec: AVCodecID,
    pub flags: ::std::os::raw::c_int,
    pub codec_tag: *const *const AVCodecTag,
    pub priv_class: *const AVClass,
    pub next: *mut AVOutputFormat,
    pub priv_data_size: ::std::os::raw::c_int,
    pub write_header: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut AVFormatContext)
                                                -> ::std::os::raw::c_int>,
    pub write_packet: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut AVFormatContext,
                                                                 pkt:
                                                                     *mut AVPacket)
                                                -> ::std::os::raw::c_int>,
    pub write_trailer: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut AVFormatContext)
                                                 -> ::std::os::raw::c_int>,
    pub interleave_packet: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut AVFormatContext,
                                                                      out:
                                                                          *mut AVPacket,
                                                                      in_:
                                                                          *mut AVPacket,
                                                                      flush:
                                                                          ::std::os::raw::c_int)
                                                     ->
                                                         ::std::os::raw::c_int>,
    pub query_codec: ::std::option::Option<unsafe extern "C" fn(id: AVCodecID,
                                                                std_compliance:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    pub get_output_timestamp: ::std::option::Option<unsafe extern "C" fn(s:
                                                                             *mut AVFormatContext,
                                                                         stream:
                                                                             ::std::os::raw::c_int,
                                                                         dts:
                                                                             *mut i64,
                                                                         wall:
                                                                             *mut i64)>,
    pub control_message: ::std::option::Option<unsafe extern "C" fn(s:
                                                                        *mut AVFormatContext,
                                                                    type_:
                                                                        ::std::os::raw::c_int,
                                                                    data:
                                                                        *mut ::std::os::raw::c_void,
                                                                    data_size:
                                                                        usize)
                                                   -> ::std::os::raw::c_int>,
    pub write_uncoded_frame: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut AVFormatContext,
                                                                        stream_index:
                                                                            ::std::os::raw::c_int,
                                                                        frame:
                                                                            *mut *mut AVFrame,
                                                                        flags:
                                                                            ::std::os::raw::c_uint)
                                                       ->
                                                           ::std::os::raw::c_int>,
    pub get_device_list: ::std::option::Option<unsafe extern "C" fn(s:
                                                                        *mut AVFormatContext,
                                                                    device_list:
                                                                        *mut AVDeviceInfoList)
                                                   -> ::std::os::raw::c_int>,
    pub create_device_capabilities: ::std::option::Option<unsafe extern "C" fn(s:
                                                                                   *mut AVFormatContext,
                                                                               caps:
                                                                                   *mut AVDeviceCapabilitiesQuery)
                                                              ->
                                                                  ::std::os::raw::c_int>,
    pub free_device_capabilities: ::std::option::Option<unsafe extern "C" fn(s:
                                                                                 *mut AVFormatContext,
                                                                             caps:
                                                                                 *mut AVDeviceCapabilitiesQuery)
                                                            ->
                                                                ::std::os::raw::c_int>,
    pub data_codec: AVCodecID,
    pub init: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut AVFormatContext)
                                        -> ::std::os::raw::c_int>,
    pub deinit: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut AVFormatContext)>,
    pub check_bitstream: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut AVFormatContext,
                                                                    pkt:
                                                                        *const AVPacket)
                                                   -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_AVOutputFormat() {
    assert_eq!(::std::mem::size_of::<AVOutputFormat>() , 200usize);
    assert_eq!(::std::mem::align_of::<AVOutputFormat>() , 8usize);
}
impl Clone for AVOutputFormat {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVInputFormat {
    pub name: *const ::std::os::raw::c_char,
    pub long_name: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub extensions: *const ::std::os::raw::c_char,
    pub codec_tag: *const *const AVCodecTag,
    pub priv_class: *const AVClass,
    pub mime_type: *const ::std::os::raw::c_char,
    pub next: *mut AVInputFormat,
    pub raw_codec_id: ::std::os::raw::c_int,
    pub priv_data_size: ::std::os::raw::c_int,
    pub read_probe: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut AVProbeData)
                                              -> ::std::os::raw::c_int>,
    pub read_header: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut AVFormatContext)
                                               -> ::std::os::raw::c_int>,
    pub read_packet: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut AVFormatContext,
                                                                pkt:
                                                                    *mut AVPacket)
                                               -> ::std::os::raw::c_int>,
    pub read_close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut AVFormatContext)
                                              -> ::std::os::raw::c_int>,
    pub read_seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut AVFormatContext,
                                                              stream_index:
                                                                  ::std::os::raw::c_int,
                                                              timestamp: i64,
                                                              flags:
                                                                  ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_int>,
    pub read_timestamp: ::std::option::Option<unsafe extern "C" fn(s:
                                                                       *mut AVFormatContext,
                                                                   stream_index:
                                                                       ::std::os::raw::c_int,
                                                                   pos:
                                                                       *mut i64,
                                                                   pos_limit:
                                                                       i64)
                                                  -> ::std::os::raw::c_long>,
    pub read_play: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut AVFormatContext)
                                             -> ::std::os::raw::c_int>,
    pub read_pause: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut AVFormatContext)
                                              -> ::std::os::raw::c_int>,
    pub read_seek2: ::std::option::Option<unsafe extern "C" fn(s:
                                                                   *mut AVFormatContext,
                                                               stream_index:
                                                                   ::std::os::raw::c_int,
                                                               min_ts: i64,
                                                               ts: i64,
                                                               max_ts: i64,
                                                               flags:
                                                                   ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int>,
    pub get_device_list: ::std::option::Option<unsafe extern "C" fn(s:
                                                                        *mut AVFormatContext,
                                                                    device_list:
                                                                        *mut AVDeviceInfoList)
                                                   -> ::std::os::raw::c_int>,
    pub create_device_capabilities: ::std::option::Option<unsafe extern "C" fn(s:
                                                                                   *mut AVFormatContext,
                                                                               caps:
                                                                                   *mut AVDeviceCapabilitiesQuery)
                                                              ->
                                                                  ::std::os::raw::c_int>,
    pub free_device_capabilities: ::std::option::Option<unsafe extern "C" fn(s:
                                                                                 *mut AVFormatContext,
                                                                             caps:
                                                                                 *mut AVDeviceCapabilitiesQuery)
                                                            ->
                                                                ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_AVInputFormat() {
    assert_eq!(::std::mem::size_of::<AVInputFormat>() , 168usize);
    assert_eq!(::std::mem::align_of::<AVInputFormat>() , 8usize);
}
impl Clone for AVInputFormat {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVStreamParseType {
    AVSTREAM_PARSE_NONE = 0,
    AVSTREAM_PARSE_FULL = 1,
    AVSTREAM_PARSE_HEADERS = 2,
    AVSTREAM_PARSE_TIMESTAMPS = 3,
    AVSTREAM_PARSE_FULL_ONCE = 4,
    AVSTREAM_PARSE_FULL_RAW = 1463898624,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVIndexEntry {
    pub pos: i64,
    pub timestamp: i64,
    pub _bitfield_1: u32,
    pub min_distance: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVIndexEntry() {
    assert_eq!(::std::mem::size_of::<AVIndexEntry>() , 24usize);
    assert_eq!(::std::mem::align_of::<AVIndexEntry>() , 8usize);
}
impl Clone for AVIndexEntry {
    fn clone(&self) -> Self { *self }
}
impl AVIndexEntry {
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (3usize as u32)) >>
                                       0u32) as u32)
        }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_int) {
        self._bitfield_1 &= !(3usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 0u32) & (3usize as u32);
    }
    #[inline]
    pub fn size(&self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4294967292usize as u32)) >> 2u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_size(&mut self, val: ::std::os::raw::c_int) {
        self._bitfield_1 &= !(4294967292usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 2u32) & (4294967292usize as u32);
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVStreamInternal([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVStream {
    pub index: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
    pub codec: *mut AVCodecContext,
    pub priv_data: *mut ::std::os::raw::c_void,
    pub pts: AVFrac,
    pub time_base: AVRational,
    pub start_time: i64,
    pub duration: i64,
    pub nb_frames: i64,
    pub disposition: ::std::os::raw::c_int,
    pub discard: AVDiscard,
    pub sample_aspect_ratio: AVRational,
    pub metadata: *mut AVDictionary,
    pub avg_frame_rate: AVRational,
    pub attached_pic: AVPacket,
    pub side_data: *mut AVPacketSideData,
    pub nb_side_data: ::std::os::raw::c_int,
    pub event_flags: ::std::os::raw::c_int,
    pub info: *mut AVStream__bindgen_ty_1,
    pub pts_wrap_bits: ::std::os::raw::c_int,
    pub first_dts: i64,
    pub cur_dts: i64,
    pub last_IP_pts: i64,
    pub last_IP_duration: ::std::os::raw::c_int,
    pub probe_packets: ::std::os::raw::c_int,
    pub codec_info_nb_frames: ::std::os::raw::c_int,
    pub need_parsing: AVStreamParseType,
    pub parser: *mut AVCodecParserContext,
    pub last_in_packet_buffer: *mut AVStream_AVPacketList,
    pub probe_data: AVProbeData,
    pub pts_buffer: [i64; 17usize],
    pub index_entries: *mut AVIndexEntry,
    pub nb_index_entries: ::std::os::raw::c_int,
    pub index_entries_allocated_size: ::std::os::raw::c_uint,
    pub r_frame_rate: AVRational,
    pub stream_identifier: ::std::os::raw::c_int,
    pub interleaver_chunk_size: i64,
    pub interleaver_chunk_duration: i64,
    pub request_probe: ::std::os::raw::c_int,
    pub skip_to_keyframe: ::std::os::raw::c_int,
    pub skip_samples: ::std::os::raw::c_int,
    pub start_skip_samples: i64,
    pub first_discard_sample: i64,
    pub last_discard_sample: i64,
    pub nb_decoded_frames: ::std::os::raw::c_int,
    pub mux_ts_offset: i64,
    pub pts_wrap_reference: i64,
    pub pts_wrap_behavior: ::std::os::raw::c_int,
    pub update_initial_durations_done: ::std::os::raw::c_int,
    pub pts_reorder_error: [i64; 17usize],
    pub pts_reorder_error_count: [u8; 17usize],
    pub last_dts_for_order_check: i64,
    pub dts_ordered: u8,
    pub dts_misordered: u8,
    pub inject_global_side_data: ::std::os::raw::c_int,
    pub recommended_encoder_configuration: *mut ::std::os::raw::c_char,
    pub display_aspect_ratio: AVRational,
    pub priv_pts: *mut AVStream_FFFrac,
    pub internal: *mut AVStreamInternal,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVStream__bindgen_ty_1 {
    pub last_dts: i64,
    pub duration_gcd: i64,
    pub duration_count: ::std::os::raw::c_int,
    pub rfps_duration_sum: i64,
    pub duration_error: *mut [[f64; 399usize]; 2usize],
    pub codec_info_duration: i64,
    pub codec_info_duration_fields: i64,
    pub found_decoder: ::std::os::raw::c_int,
    pub last_duration: i64,
    pub fps_first_dts: i64,
    pub fps_first_dts_idx: ::std::os::raw::c_int,
    pub fps_last_dts: i64,
    pub fps_last_dts_idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVStream__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<AVStream__bindgen_ty_1>() , 104usize);
    assert_eq!(::std::mem::align_of::<AVStream__bindgen_ty_1>() , 8usize);
}
impl Clone for AVStream__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVStream_AVPacketList {
    pub pkt: AVPacket,
    pub next: *mut AVStream_AVPacketList,
}
#[test]
fn bindgen_test_layout_AVStream_AVPacketList() {
    assert_eq!(::std::mem::size_of::<AVStream_AVPacketList>() , 96usize);
    assert_eq!(::std::mem::align_of::<AVStream_AVPacketList>() , 8usize);
}
impl Clone for AVStream_AVPacketList {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVStream_FFFrac([u8; 0]);
impl Clone for AVStream {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn av_stream_get_r_frame_rate(s: *const AVStream) -> AVRational;
}
extern "C" {
    pub fn av_stream_set_r_frame_rate(s: *mut AVStream, r: AVRational);
}
extern "C" {
    pub fn av_stream_get_parser(s: *const AVStream)
     -> *mut AVCodecParserContext;
}
extern "C" {
    pub fn av_stream_get_recommended_encoder_configuration(s: *const AVStream)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_stream_set_recommended_encoder_configuration(s: *mut AVStream,
                                                           configuration:
                                                               *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn av_stream_get_end_pts(st: *const AVStream) -> i64;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVProgram {
    pub id: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub discard: AVDiscard,
    pub stream_index: *mut ::std::os::raw::c_uint,
    pub nb_stream_indexes: ::std::os::raw::c_uint,
    pub metadata: *mut AVDictionary,
    pub program_num: ::std::os::raw::c_int,
    pub pmt_pid: ::std::os::raw::c_int,
    pub pcr_pid: ::std::os::raw::c_int,
    pub start_time: i64,
    pub end_time: i64,
    pub pts_wrap_reference: i64,
    pub pts_wrap_behavior: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVProgram() {
    assert_eq!(::std::mem::size_of::<AVProgram>() , 88usize);
    assert_eq!(::std::mem::align_of::<AVProgram>() , 8usize);
}
impl Clone for AVProgram {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct AVChapter {
    pub id: ::std::os::raw::c_int,
    pub time_base: AVRational,
    pub start: i64,
    pub end: i64,
    pub metadata: *mut AVDictionary,
}
#[test]
fn bindgen_test_layout_AVChapter() {
    assert_eq!(::std::mem::size_of::<AVChapter>() , 40usize);
    assert_eq!(::std::mem::align_of::<AVChapter>() , 8usize);
}
impl Clone for AVChapter {
    fn clone(&self) -> Self { *self }
}
pub type av_format_control_message =
    ::std::option::Option<unsafe extern "C" fn(s: *mut AVFormatContext,
                                               type_: ::std::os::raw::c_int,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               data_size: usize)
                              -> ::std::os::raw::c_int>;
pub type AVOpenCallback =
    ::std::option::Option<unsafe extern "C" fn(s: *mut AVFormatContext,
                                               pb: *mut *mut AVIOContext,
                                               url:
                                                   *const ::std::os::raw::c_char,
                                               flags: ::std::os::raw::c_int,
                                               int_cb: *const AVIOInterruptCB,
                                               options:
                                                   *mut *mut AVDictionary)
                              -> ::std::os::raw::c_int>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum AVDurationEstimationMethod {
    AVFMT_DURATION_FROM_PTS = 0,
    AVFMT_DURATION_FROM_STREAM = 1,
    AVFMT_DURATION_FROM_BITRATE = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVFormatInternal([u8; 0]);
extern "C" {
    pub fn av_format_get_probe_score(s: *const AVFormatContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_format_get_video_codec(s: *const AVFormatContext)
     -> *mut AVCodec;
}
extern "C" {
    pub fn av_format_set_video_codec(s: *mut AVFormatContext,
                                     c: *mut AVCodec);
}
extern "C" {
    pub fn av_format_get_audio_codec(s: *const AVFormatContext)
     -> *mut AVCodec;
}
extern "C" {
    pub fn av_format_set_audio_codec(s: *mut AVFormatContext,
                                     c: *mut AVCodec);
}
extern "C" {
    pub fn av_format_get_subtitle_codec(s: *const AVFormatContext)
     -> *mut AVCodec;
}
extern "C" {
    pub fn av_format_set_subtitle_codec(s: *mut AVFormatContext,
                                        c: *mut AVCodec);
}
extern "C" {
    pub fn av_format_get_data_codec(s: *const AVFormatContext)
     -> *mut AVCodec;
}
extern "C" {
    pub fn av_format_set_data_codec(s: *mut AVFormatContext, c: *mut AVCodec);
}
extern "C" {
    pub fn av_format_get_metadata_header_padding(s: *const AVFormatContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_format_set_metadata_header_padding(s: *mut AVFormatContext,
                                                 c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_format_get_opaque(s: *const AVFormatContext)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn av_format_set_opaque(s: *mut AVFormatContext,
                                opaque: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn av_format_get_control_message_cb(s: *const AVFormatContext)
     -> av_format_control_message;
}
extern "C" {
    pub fn av_format_set_control_message_cb(s: *mut AVFormatContext,
                                            callback:
                                                av_format_control_message);
}
extern "C" {
    pub fn av_format_get_open_cb(s: *const AVFormatContext) -> AVOpenCallback;
}
extern "C" {
    pub fn av_format_set_open_cb(s: *mut AVFormatContext,
                                 callback: AVOpenCallback);
}
extern "C" {
    pub fn av_format_inject_global_side_data(s: *mut AVFormatContext);
}
extern "C" {
    pub fn av_fmt_ctx_get_duration_estimation_method(ctx:
                                                         *const AVFormatContext)
     -> AVDurationEstimationMethod;
}
pub type AVPacketList = AVStream_AVPacketList;
extern "C" {
    pub fn avformat_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn avformat_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avformat_license() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn av_register_all();
}
extern "C" {
    pub fn av_register_input_format(format: *mut AVInputFormat);
}
extern "C" {
    pub fn av_register_output_format(format: *mut AVOutputFormat);
}
extern "C" {
    pub fn avformat_network_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_network_deinit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_iformat_next(f: *const AVInputFormat) -> *mut AVInputFormat;
}
extern "C" {
    pub fn av_oformat_next(f: *const AVOutputFormat) -> *mut AVOutputFormat;
}
extern "C" {
    pub fn avformat_alloc_context() -> *mut AVFormatContext;
}
extern "C" {
    pub fn avformat_free_context(s: *mut AVFormatContext);
}
extern "C" {
    pub fn avformat_get_class() -> *const AVClass;
}
extern "C" {
    pub fn avformat_new_stream(s: *mut AVFormatContext, c: *const AVCodec)
     -> *mut AVStream;
}
extern "C" {
    pub fn av_stream_new_side_data(stream: *mut AVStream,
                                   type_: AVPacketSideDataType,
                                   size: ::std::os::raw::c_int) -> *mut u8;
}
extern "C" {
    pub fn av_stream_get_side_data(stream: *mut AVStream,
                                   type_: AVPacketSideDataType,
                                   size: *mut ::std::os::raw::c_int)
     -> *mut u8;
}
extern "C" {
    pub fn av_new_program(s: *mut AVFormatContext, id: ::std::os::raw::c_int)
     -> *mut AVProgram;
}
extern "C" {
    pub fn avformat_alloc_output_context2(ctx: *mut *mut AVFormatContext,
                                          oformat: *mut AVOutputFormat,
                                          format_name:
                                              *const ::std::os::raw::c_char,
                                          filename:
                                              *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_find_input_format(short_name: *const ::std::os::raw::c_char)
     -> *mut AVInputFormat;
}
extern "C" {
    pub fn av_probe_input_format(pd: *mut AVProbeData,
                                 is_opened: ::std::os::raw::c_int)
     -> *mut AVInputFormat;
}
extern "C" {
    pub fn av_probe_input_format2(pd: *mut AVProbeData,
                                  is_opened: ::std::os::raw::c_int,
                                  score_max: *mut ::std::os::raw::c_int)
     -> *mut AVInputFormat;
}
extern "C" {
    pub fn av_probe_input_format3(pd: *mut AVProbeData,
                                  is_opened: ::std::os::raw::c_int,
                                  score_ret: *mut ::std::os::raw::c_int)
     -> *mut AVInputFormat;
}
extern "C" {
    pub fn av_probe_input_buffer2(pb: *mut AVIOContext,
                                  fmt: *mut *mut AVInputFormat,
                                  url: *const ::std::os::raw::c_char,
                                  logctx: *mut ::std::os::raw::c_void,
                                  offset: ::std::os::raw::c_uint,
                                  max_probe_size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_probe_input_buffer(pb: *mut AVIOContext,
                                 fmt: *mut *mut AVInputFormat,
                                 url: *const ::std::os::raw::c_char,
                                 logctx: *mut ::std::os::raw::c_void,
                                 offset: ::std::os::raw::c_uint,
                                 max_probe_size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_open_input(ps: *mut *mut AVFormatContext,
                               url: *const ::std::os::raw::c_char,
                               fmt: *mut AVInputFormat,
                               options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_demuxer_open(ic: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_find_stream_info(ic: *mut AVFormatContext,
                                     options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_find_program_from_stream(ic: *mut AVFormatContext,
                                       last: *mut AVProgram,
                                       s: ::std::os::raw::c_int)
     -> *mut AVProgram;
}
extern "C" {
    pub fn av_program_add_stream_index(ac: *mut AVFormatContext,
                                       progid: ::std::os::raw::c_int,
                                       idx: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn av_find_best_stream(ic: *mut AVFormatContext, type_: AVMediaType,
                               wanted_stream_nb: ::std::os::raw::c_int,
                               related_stream: ::std::os::raw::c_int,
                               decoder_ret: *mut *mut AVCodec,
                               flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_read_frame(s: *mut AVFormatContext, pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_seek_frame(s: *mut AVFormatContext,
                         stream_index: ::std::os::raw::c_int, timestamp: i64,
                         flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_seek_file(s: *mut AVFormatContext,
                              stream_index: ::std::os::raw::c_int,
                              min_ts: i64, ts: i64, max_ts: i64,
                              flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_flush(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_read_play(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_read_pause(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_close_input(s: *mut *mut AVFormatContext);
}
extern "C" {
    pub fn avformat_write_header(s: *mut AVFormatContext,
                                 options: *mut *mut AVDictionary)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_write_frame(s: *mut AVFormatContext, pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_interleaved_write_frame(s: *mut AVFormatContext,
                                      pkt: *mut AVPacket)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_write_uncoded_frame(s: *mut AVFormatContext,
                                  stream_index: ::std::os::raw::c_int,
                                  frame: *mut AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_interleaved_write_uncoded_frame(s: *mut AVFormatContext,
                                              stream_index:
                                                  ::std::os::raw::c_int,
                                              frame: *mut AVFrame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_write_uncoded_frame_query(s: *mut AVFormatContext,
                                        stream_index: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_write_trailer(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_guess_format(short_name: *const ::std::os::raw::c_char,
                           filename: *const ::std::os::raw::c_char,
                           mime_type: *const ::std::os::raw::c_char)
     -> *mut AVOutputFormat;
}
extern "C" {
    pub fn av_guess_codec(fmt: *mut AVOutputFormat,
                          short_name: *const ::std::os::raw::c_char,
                          filename: *const ::std::os::raw::c_char,
                          mime_type: *const ::std::os::raw::c_char,
                          type_: AVMediaType) -> AVCodecID;
}
extern "C" {
    pub fn av_get_output_timestamp(s: *mut AVFormatContext,
                                   stream: ::std::os::raw::c_int,
                                   dts: *mut i64, wall: *mut i64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_hex_dump(f: *mut FILE, buf: *const u8,
                       size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_hex_dump_log(avcl: *mut ::std::os::raw::c_void,
                           level: ::std::os::raw::c_int, buf: *const u8,
                           size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_pkt_dump2(f: *mut FILE, pkt: *const AVPacket,
                        dump_payload: ::std::os::raw::c_int,
                        st: *const AVStream);
}
extern "C" {
    pub fn av_pkt_dump_log2(avcl: *mut ::std::os::raw::c_void,
                            level: ::std::os::raw::c_int,
                            pkt: *const AVPacket,
                            dump_payload: ::std::os::raw::c_int,
                            st: *const AVStream);
}
extern "C" {
    pub fn av_codec_get_id(tags: *const *const AVCodecTag,
                           tag: ::std::os::raw::c_uint) -> AVCodecID;
}
extern "C" {
    pub fn av_codec_get_tag(tags: *const *const AVCodecTag, id: AVCodecID)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn av_codec_get_tag2(tags: *const *const AVCodecTag, id: AVCodecID,
                             tag: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_find_default_stream_index(s: *mut AVFormatContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_index_search_timestamp(st: *mut AVStream, timestamp: i64,
                                     flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_add_index_entry(st: *mut AVStream, pos: i64, timestamp: i64,
                              size: ::std::os::raw::c_int,
                              distance: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_url_split(proto: *mut ::std::os::raw::c_char,
                        proto_size: ::std::os::raw::c_int,
                        authorization: *mut ::std::os::raw::c_char,
                        authorization_size: ::std::os::raw::c_int,
                        hostname: *mut ::std::os::raw::c_char,
                        hostname_size: ::std::os::raw::c_int,
                        port_ptr: *mut ::std::os::raw::c_int,
                        path: *mut ::std::os::raw::c_char,
                        path_size: ::std::os::raw::c_int,
                        url: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn av_dump_format(ic: *mut AVFormatContext,
                          index: ::std::os::raw::c_int,
                          url: *const ::std::os::raw::c_char,
                          is_output: ::std::os::raw::c_int);
}
extern "C" {
    pub fn av_get_frame_filename(buf: *mut ::std::os::raw::c_char,
                                 buf_size: ::std::os::raw::c_int,
                                 path: *const ::std::os::raw::c_char,
                                 number: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_filename_number_test(filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_sdp_create(ac: *mut *mut AVFormatContext,
                         n_files: ::std::os::raw::c_int,
                         buf: *mut ::std::os::raw::c_char,
                         size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_match_ext(filename: *const ::std::os::raw::c_char,
                        extensions: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_query_codec(ofmt: *const AVOutputFormat,
                                codec_id: AVCodecID,
                                std_compliance: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_get_riff_video_tags() -> *const AVCodecTag;
}
extern "C" {
    pub fn avformat_get_riff_audio_tags() -> *const AVCodecTag;
}
extern "C" {
    pub fn avformat_get_mov_video_tags() -> *const AVCodecTag;
}
extern "C" {
    pub fn avformat_get_mov_audio_tags() -> *const AVCodecTag;
}
extern "C" {
    pub fn av_guess_sample_aspect_ratio(format: *mut AVFormatContext,
                                        stream: *mut AVStream,
                                        frame: *mut AVFrame) -> AVRational;
}
extern "C" {
    pub fn av_guess_frame_rate(ctx: *mut AVFormatContext,
                               stream: *mut AVStream, frame: *mut AVFrame)
     -> AVRational;
}
extern "C" {
    pub fn avformat_match_stream_specifier(s: *mut AVFormatContext,
                                           st: *mut AVStream,
                                           spec:
                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avformat_queue_attached_pictures(s: *mut AVFormatContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn av_apply_bitstream_filters(codec: *mut AVCodecContext,
                                      pkt: *mut AVPacket,
                                      bsfc: *mut AVBitStreamFilterContext)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
